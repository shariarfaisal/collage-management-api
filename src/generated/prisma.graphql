# source: http://localhost:4466
# timestamp: Tue Dec 03 2019 23:21:52 GMT+0600 (+06)

type Admin implements Node {
  id: ID!
  name: String!
  email: String!
  username: String!
  password: String!
}

"""A connection to a list of items."""
type AdminConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AdminEdge]!
  aggregate: AggregateAdmin!
}

input AdminCreateInput {
  id: ID
  name: String!
  email: String!
  username: String!
  password: String!
}

"""An edge in a connection."""
type AdminEdge {
  """The item at the end of the edge."""
  node: Admin!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AdminOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
}

type AdminPreviousValues {
  id: ID!
  name: String!
  email: String!
  username: String!
  password: String!
}

type AdminSubscriptionPayload {
  mutation: MutationType!
  node: Admin
  updatedFields: [String!]
  previousValues: AdminPreviousValues
}

input AdminSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AdminSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AdminSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AdminSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AdminWhereInput
}

input AdminUpdateInput {
  name: String
  email: String
  username: String
  password: String
}

input AdminUpdateManyMutationInput {
  name: String
  email: String
  username: String
  password: String
}

input AdminWhereInput {
  """Logical AND on all given filters."""
  AND: [AdminWhereInput!]

  """Logical OR on all given filters."""
  OR: [AdminWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AdminWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
}

input AdminWhereUniqueInput {
  id: ID
  name: String
  email: String
  username: String
}

type AggregateAdmin {
  count: Int!
}

type AggregateAttendence {
  count: Int!
}

type AggregateAttendenceClass {
  count: Int!
}

type AggregateAttendenceDay {
  count: Int!
}

type AggregateBook {
  count: Int!
}

type AggregateBookList {
  count: Int!
}

type AggregateClass {
  count: Int!
}

type AggregateDayInWeek {
  count: Int!
}

type AggregateDepartment {
  count: Int!
}

type AggregateNote {
  count: Int!
}

type AggregateNotice {
  count: Int!
}

type AggregatePeriod {
  count: Int!
}

type AggregateRoutine {
  count: Int!
}

type AggregateSemester {
  count: Int!
}

type AggregateSession {
  count: Int!
}

type AggregateStudent {
  count: Int!
}

type AggregateTeacher {
  count: Int!
}

type Attendence implements Node {
  id: ID!
  class: AttendenceClass!
  student: Student!
  present: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AttendenceClass implements Node {
  id: ID!
  day: AttendenceDay!
  class: Class!
  attendences(where: AttendenceWhereInput, orderBy: AttendenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attendence!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type AttendenceClassConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttendenceClassEdge]!
  aggregate: AggregateAttendenceClass!
}

input AttendenceClassCreateInput {
  id: ID
  day: AttendenceDayCreateOneWithoutClassesInput!
  class: ClassCreateOneWithoutAttendenceClassesInput!
  attendences: AttendenceCreateManyWithoutClassInput
}

input AttendenceClassCreateManyWithoutClassInput {
  create: [AttendenceClassCreateWithoutClassInput!]
  connect: [AttendenceClassWhereUniqueInput!]
}

input AttendenceClassCreateManyWithoutDayInput {
  create: [AttendenceClassCreateWithoutDayInput!]
  connect: [AttendenceClassWhereUniqueInput!]
}

input AttendenceClassCreateOneWithoutAttendencesInput {
  create: AttendenceClassCreateWithoutAttendencesInput
  connect: AttendenceClassWhereUniqueInput
}

input AttendenceClassCreateWithoutAttendencesInput {
  id: ID
  day: AttendenceDayCreateOneWithoutClassesInput!
  class: ClassCreateOneWithoutAttendenceClassesInput!
}

input AttendenceClassCreateWithoutClassInput {
  id: ID
  day: AttendenceDayCreateOneWithoutClassesInput!
  attendences: AttendenceCreateManyWithoutClassInput
}

input AttendenceClassCreateWithoutDayInput {
  id: ID
  class: ClassCreateOneWithoutAttendenceClassesInput!
  attendences: AttendenceCreateManyWithoutClassInput
}

"""An edge in a connection."""
type AttendenceClassEdge {
  """The item at the end of the edge."""
  node: AttendenceClass!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AttendenceClassOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AttendenceClassPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AttendenceClassScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AttendenceClassScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttendenceClassScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttendenceClassScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type AttendenceClassSubscriptionPayload {
  mutation: MutationType!
  node: AttendenceClass
  updatedFields: [String!]
  previousValues: AttendenceClassPreviousValues
}

input AttendenceClassSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AttendenceClassSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttendenceClassSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttendenceClassSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AttendenceClassWhereInput
}

input AttendenceClassUpdateInput {
  day: AttendenceDayUpdateOneRequiredWithoutClassesInput
  class: ClassUpdateOneRequiredWithoutAttendenceClassesInput
  attendences: AttendenceUpdateManyWithoutClassInput
}

input AttendenceClassUpdateManyWithoutClassInput {
  create: [AttendenceClassCreateWithoutClassInput!]
  connect: [AttendenceClassWhereUniqueInput!]
  set: [AttendenceClassWhereUniqueInput!]
  disconnect: [AttendenceClassWhereUniqueInput!]
  delete: [AttendenceClassWhereUniqueInput!]
  update: [AttendenceClassUpdateWithWhereUniqueWithoutClassInput!]
  deleteMany: [AttendenceClassScalarWhereInput!]
  upsert: [AttendenceClassUpsertWithWhereUniqueWithoutClassInput!]
}

input AttendenceClassUpdateManyWithoutDayInput {
  create: [AttendenceClassCreateWithoutDayInput!]
  connect: [AttendenceClassWhereUniqueInput!]
  set: [AttendenceClassWhereUniqueInput!]
  disconnect: [AttendenceClassWhereUniqueInput!]
  delete: [AttendenceClassWhereUniqueInput!]
  update: [AttendenceClassUpdateWithWhereUniqueWithoutDayInput!]
  deleteMany: [AttendenceClassScalarWhereInput!]
  upsert: [AttendenceClassUpsertWithWhereUniqueWithoutDayInput!]
}

input AttendenceClassUpdateOneRequiredWithoutAttendencesInput {
  create: AttendenceClassCreateWithoutAttendencesInput
  connect: AttendenceClassWhereUniqueInput
  update: AttendenceClassUpdateWithoutAttendencesDataInput
  upsert: AttendenceClassUpsertWithoutAttendencesInput
}

input AttendenceClassUpdateWithoutAttendencesDataInput {
  day: AttendenceDayUpdateOneRequiredWithoutClassesInput
  class: ClassUpdateOneRequiredWithoutAttendenceClassesInput
}

input AttendenceClassUpdateWithoutClassDataInput {
  day: AttendenceDayUpdateOneRequiredWithoutClassesInput
  attendences: AttendenceUpdateManyWithoutClassInput
}

input AttendenceClassUpdateWithoutDayDataInput {
  class: ClassUpdateOneRequiredWithoutAttendenceClassesInput
  attendences: AttendenceUpdateManyWithoutClassInput
}

input AttendenceClassUpdateWithWhereUniqueWithoutClassInput {
  where: AttendenceClassWhereUniqueInput!
  data: AttendenceClassUpdateWithoutClassDataInput!
}

input AttendenceClassUpdateWithWhereUniqueWithoutDayInput {
  where: AttendenceClassWhereUniqueInput!
  data: AttendenceClassUpdateWithoutDayDataInput!
}

input AttendenceClassUpsertWithoutAttendencesInput {
  update: AttendenceClassUpdateWithoutAttendencesDataInput!
  create: AttendenceClassCreateWithoutAttendencesInput!
}

input AttendenceClassUpsertWithWhereUniqueWithoutClassInput {
  where: AttendenceClassWhereUniqueInput!
  update: AttendenceClassUpdateWithoutClassDataInput!
  create: AttendenceClassCreateWithoutClassInput!
}

input AttendenceClassUpsertWithWhereUniqueWithoutDayInput {
  where: AttendenceClassWhereUniqueInput!
  update: AttendenceClassUpdateWithoutDayDataInput!
  create: AttendenceClassCreateWithoutDayInput!
}

input AttendenceClassWhereInput {
  """Logical AND on all given filters."""
  AND: [AttendenceClassWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttendenceClassWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttendenceClassWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  day: AttendenceDayWhereInput
  class: ClassWhereInput
  attendences_every: AttendenceWhereInput
  attendences_some: AttendenceWhereInput
  attendences_none: AttendenceWhereInput
}

input AttendenceClassWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type AttendenceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttendenceEdge]!
  aggregate: AggregateAttendence!
}

input AttendenceCreateInput {
  id: ID
  present: Boolean!
  class: AttendenceClassCreateOneWithoutAttendencesInput!
  student: StudentCreateOneWithoutAttendencesInput!
}

input AttendenceCreateManyWithoutClassInput {
  create: [AttendenceCreateWithoutClassInput!]
  connect: [AttendenceWhereUniqueInput!]
}

input AttendenceCreateManyWithoutStudentInput {
  create: [AttendenceCreateWithoutStudentInput!]
  connect: [AttendenceWhereUniqueInput!]
}

input AttendenceCreateWithoutClassInput {
  id: ID
  present: Boolean!
  student: StudentCreateOneWithoutAttendencesInput!
}

input AttendenceCreateWithoutStudentInput {
  id: ID
  present: Boolean!
  class: AttendenceClassCreateOneWithoutAttendencesInput!
}

type AttendenceDay implements Node {
  id: ID!
  date: String!
  classes(where: AttendenceClassWhereInput, orderBy: AttendenceClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AttendenceClass!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type AttendenceDayConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttendenceDayEdge]!
  aggregate: AggregateAttendenceDay!
}

input AttendenceDayCreateInput {
  id: ID
  date: String!
  classes: AttendenceClassCreateManyWithoutDayInput
}

input AttendenceDayCreateOneWithoutClassesInput {
  create: AttendenceDayCreateWithoutClassesInput
  connect: AttendenceDayWhereUniqueInput
}

input AttendenceDayCreateWithoutClassesInput {
  id: ID
  date: String!
}

"""An edge in a connection."""
type AttendenceDayEdge {
  """The item at the end of the edge."""
  node: AttendenceDay!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AttendenceDayOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AttendenceDayPreviousValues {
  id: ID!
  date: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AttendenceDaySubscriptionPayload {
  mutation: MutationType!
  node: AttendenceDay
  updatedFields: [String!]
  previousValues: AttendenceDayPreviousValues
}

input AttendenceDaySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AttendenceDaySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttendenceDaySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttendenceDaySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AttendenceDayWhereInput
}

input AttendenceDayUpdateInput {
  date: String
  classes: AttendenceClassUpdateManyWithoutDayInput
}

input AttendenceDayUpdateManyMutationInput {
  date: String
}

input AttendenceDayUpdateOneRequiredWithoutClassesInput {
  create: AttendenceDayCreateWithoutClassesInput
  connect: AttendenceDayWhereUniqueInput
  update: AttendenceDayUpdateWithoutClassesDataInput
  upsert: AttendenceDayUpsertWithoutClassesInput
}

input AttendenceDayUpdateWithoutClassesDataInput {
  date: String
}

input AttendenceDayUpsertWithoutClassesInput {
  update: AttendenceDayUpdateWithoutClassesDataInput!
  create: AttendenceDayCreateWithoutClassesInput!
}

input AttendenceDayWhereInput {
  """Logical AND on all given filters."""
  AND: [AttendenceDayWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttendenceDayWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttendenceDayWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  date: String

  """All values that are not equal to given value."""
  date_not: String

  """All values that are contained in given list."""
  date_in: [String!]

  """All values that are not contained in given list."""
  date_not_in: [String!]

  """All values less than the given value."""
  date_lt: String

  """All values less than or equal the given value."""
  date_lte: String

  """All values greater than the given value."""
  date_gt: String

  """All values greater than or equal the given value."""
  date_gte: String

  """All values containing the given string."""
  date_contains: String

  """All values not containing the given string."""
  date_not_contains: String

  """All values starting with the given string."""
  date_starts_with: String

  """All values not starting with the given string."""
  date_not_starts_with: String

  """All values ending with the given string."""
  date_ends_with: String

  """All values not ending with the given string."""
  date_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  classes_every: AttendenceClassWhereInput
  classes_some: AttendenceClassWhereInput
  classes_none: AttendenceClassWhereInput
}

input AttendenceDayWhereUniqueInput {
  id: ID
  date: String
}

"""An edge in a connection."""
type AttendenceEdge {
  """The item at the end of the edge."""
  node: Attendence!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AttendenceOrderByInput {
  id_ASC
  id_DESC
  present_ASC
  present_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AttendencePreviousValues {
  id: ID!
  present: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AttendenceScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AttendenceScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttendenceScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttendenceScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  present: Boolean

  """All values that are not equal to given value."""
  present_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type AttendenceSubscriptionPayload {
  mutation: MutationType!
  node: Attendence
  updatedFields: [String!]
  previousValues: AttendencePreviousValues
}

input AttendenceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AttendenceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttendenceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttendenceSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AttendenceWhereInput
}

input AttendenceUpdateInput {
  present: Boolean
  class: AttendenceClassUpdateOneRequiredWithoutAttendencesInput
  student: StudentUpdateOneRequiredWithoutAttendencesInput
}

input AttendenceUpdateManyDataInput {
  present: Boolean
}

input AttendenceUpdateManyMutationInput {
  present: Boolean
}

input AttendenceUpdateManyWithoutClassInput {
  create: [AttendenceCreateWithoutClassInput!]
  connect: [AttendenceWhereUniqueInput!]
  set: [AttendenceWhereUniqueInput!]
  disconnect: [AttendenceWhereUniqueInput!]
  delete: [AttendenceWhereUniqueInput!]
  update: [AttendenceUpdateWithWhereUniqueWithoutClassInput!]
  updateMany: [AttendenceUpdateManyWithWhereNestedInput!]
  deleteMany: [AttendenceScalarWhereInput!]
  upsert: [AttendenceUpsertWithWhereUniqueWithoutClassInput!]
}

input AttendenceUpdateManyWithoutStudentInput {
  create: [AttendenceCreateWithoutStudentInput!]
  connect: [AttendenceWhereUniqueInput!]
  set: [AttendenceWhereUniqueInput!]
  disconnect: [AttendenceWhereUniqueInput!]
  delete: [AttendenceWhereUniqueInput!]
  update: [AttendenceUpdateWithWhereUniqueWithoutStudentInput!]
  updateMany: [AttendenceUpdateManyWithWhereNestedInput!]
  deleteMany: [AttendenceScalarWhereInput!]
  upsert: [AttendenceUpsertWithWhereUniqueWithoutStudentInput!]
}

input AttendenceUpdateManyWithWhereNestedInput {
  where: AttendenceScalarWhereInput!
  data: AttendenceUpdateManyDataInput!
}

input AttendenceUpdateWithoutClassDataInput {
  present: Boolean
  student: StudentUpdateOneRequiredWithoutAttendencesInput
}

input AttendenceUpdateWithoutStudentDataInput {
  present: Boolean
  class: AttendenceClassUpdateOneRequiredWithoutAttendencesInput
}

input AttendenceUpdateWithWhereUniqueWithoutClassInput {
  where: AttendenceWhereUniqueInput!
  data: AttendenceUpdateWithoutClassDataInput!
}

input AttendenceUpdateWithWhereUniqueWithoutStudentInput {
  where: AttendenceWhereUniqueInput!
  data: AttendenceUpdateWithoutStudentDataInput!
}

input AttendenceUpsertWithWhereUniqueWithoutClassInput {
  where: AttendenceWhereUniqueInput!
  update: AttendenceUpdateWithoutClassDataInput!
  create: AttendenceCreateWithoutClassInput!
}

input AttendenceUpsertWithWhereUniqueWithoutStudentInput {
  where: AttendenceWhereUniqueInput!
  update: AttendenceUpdateWithoutStudentDataInput!
  create: AttendenceCreateWithoutStudentInput!
}

input AttendenceWhereInput {
  """Logical AND on all given filters."""
  AND: [AttendenceWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttendenceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttendenceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  present: Boolean

  """All values that are not equal to given value."""
  present_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  class: AttendenceClassWhereInput
  student: StudentWhereInput
}

input AttendenceWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Book implements Node {
  id: ID!
  name: String!
  code: String!
  bookList: BookList!
  classes(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Class!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BookConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookEdge]!
  aggregate: AggregateBook!
}

input BookCreateInput {
  id: ID
  name: String!
  code: String!
  bookList: BookListCreateOneWithoutBooksInput!
  classes: ClassCreateManyWithoutSubjectInput
}

input BookCreateManyWithoutBookListInput {
  create: [BookCreateWithoutBookListInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateOneWithoutClassesInput {
  create: BookCreateWithoutClassesInput
  connect: BookWhereUniqueInput
}

input BookCreateWithoutBookListInput {
  id: ID
  name: String!
  code: String!
  classes: ClassCreateManyWithoutSubjectInput
}

input BookCreateWithoutClassesInput {
  id: ID
  name: String!
  code: String!
  bookList: BookListCreateOneWithoutBooksInput!
}

"""An edge in a connection."""
type BookEdge {
  """The item at the end of the edge."""
  node: Book!

  """A cursor for use in pagination."""
  cursor: String!
}

type BookList implements Node {
  id: ID!
  department: Department!
  semester: Semester!
  probidan: String!
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BookListConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookListEdge]!
  aggregate: AggregateBookList!
}

input BookListCreateInput {
  id: ID
  probidan: String!
  department: DepartmentCreateOneWithoutBookListsInput!
  semester: SemesterCreateOneWithoutBookListsInput!
  books: BookCreateManyWithoutBookListInput
}

input BookListCreateManyWithoutDepartmentInput {
  create: [BookListCreateWithoutDepartmentInput!]
  connect: [BookListWhereUniqueInput!]
}

input BookListCreateManyWithoutSemesterInput {
  create: [BookListCreateWithoutSemesterInput!]
  connect: [BookListWhereUniqueInput!]
}

input BookListCreateOneWithoutBooksInput {
  create: BookListCreateWithoutBooksInput
  connect: BookListWhereUniqueInput
}

input BookListCreateWithoutBooksInput {
  id: ID
  probidan: String!
  department: DepartmentCreateOneWithoutBookListsInput!
  semester: SemesterCreateOneWithoutBookListsInput!
}

input BookListCreateWithoutDepartmentInput {
  id: ID
  probidan: String!
  semester: SemesterCreateOneWithoutBookListsInput!
  books: BookCreateManyWithoutBookListInput
}

input BookListCreateWithoutSemesterInput {
  id: ID
  probidan: String!
  department: DepartmentCreateOneWithoutBookListsInput!
  books: BookCreateManyWithoutBookListInput
}

"""An edge in a connection."""
type BookListEdge {
  """The item at the end of the edge."""
  node: BookList!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookListOrderByInput {
  id_ASC
  id_DESC
  probidan_ASC
  probidan_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BookListPreviousValues {
  id: ID!
  probidan: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input BookListScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BookListScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookListScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookListScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  probidan: String

  """All values that are not equal to given value."""
  probidan_not: String

  """All values that are contained in given list."""
  probidan_in: [String!]

  """All values that are not contained in given list."""
  probidan_not_in: [String!]

  """All values less than the given value."""
  probidan_lt: String

  """All values less than or equal the given value."""
  probidan_lte: String

  """All values greater than the given value."""
  probidan_gt: String

  """All values greater than or equal the given value."""
  probidan_gte: String

  """All values containing the given string."""
  probidan_contains: String

  """All values not containing the given string."""
  probidan_not_contains: String

  """All values starting with the given string."""
  probidan_starts_with: String

  """All values not starting with the given string."""
  probidan_not_starts_with: String

  """All values ending with the given string."""
  probidan_ends_with: String

  """All values not ending with the given string."""
  probidan_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type BookListSubscriptionPayload {
  mutation: MutationType!
  node: BookList
  updatedFields: [String!]
  previousValues: BookListPreviousValues
}

input BookListSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookListSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookListSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookListSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookListWhereInput
}

input BookListUpdateInput {
  probidan: String
  department: DepartmentUpdateOneRequiredWithoutBookListsInput
  semester: SemesterUpdateOneRequiredWithoutBookListsInput
  books: BookUpdateManyWithoutBookListInput
}

input BookListUpdateManyDataInput {
  probidan: String
}

input BookListUpdateManyMutationInput {
  probidan: String
}

input BookListUpdateManyWithoutDepartmentInput {
  create: [BookListCreateWithoutDepartmentInput!]
  connect: [BookListWhereUniqueInput!]
  set: [BookListWhereUniqueInput!]
  disconnect: [BookListWhereUniqueInput!]
  delete: [BookListWhereUniqueInput!]
  update: [BookListUpdateWithWhereUniqueWithoutDepartmentInput!]
  updateMany: [BookListUpdateManyWithWhereNestedInput!]
  deleteMany: [BookListScalarWhereInput!]
  upsert: [BookListUpsertWithWhereUniqueWithoutDepartmentInput!]
}

input BookListUpdateManyWithoutSemesterInput {
  create: [BookListCreateWithoutSemesterInput!]
  connect: [BookListWhereUniqueInput!]
  set: [BookListWhereUniqueInput!]
  disconnect: [BookListWhereUniqueInput!]
  delete: [BookListWhereUniqueInput!]
  update: [BookListUpdateWithWhereUniqueWithoutSemesterInput!]
  updateMany: [BookListUpdateManyWithWhereNestedInput!]
  deleteMany: [BookListScalarWhereInput!]
  upsert: [BookListUpsertWithWhereUniqueWithoutSemesterInput!]
}

input BookListUpdateManyWithWhereNestedInput {
  where: BookListScalarWhereInput!
  data: BookListUpdateManyDataInput!
}

input BookListUpdateOneRequiredWithoutBooksInput {
  create: BookListCreateWithoutBooksInput
  connect: BookListWhereUniqueInput
  update: BookListUpdateWithoutBooksDataInput
  upsert: BookListUpsertWithoutBooksInput
}

input BookListUpdateWithoutBooksDataInput {
  probidan: String
  department: DepartmentUpdateOneRequiredWithoutBookListsInput
  semester: SemesterUpdateOneRequiredWithoutBookListsInput
}

input BookListUpdateWithoutDepartmentDataInput {
  probidan: String
  semester: SemesterUpdateOneRequiredWithoutBookListsInput
  books: BookUpdateManyWithoutBookListInput
}

input BookListUpdateWithoutSemesterDataInput {
  probidan: String
  department: DepartmentUpdateOneRequiredWithoutBookListsInput
  books: BookUpdateManyWithoutBookListInput
}

input BookListUpdateWithWhereUniqueWithoutDepartmentInput {
  where: BookListWhereUniqueInput!
  data: BookListUpdateWithoutDepartmentDataInput!
}

input BookListUpdateWithWhereUniqueWithoutSemesterInput {
  where: BookListWhereUniqueInput!
  data: BookListUpdateWithoutSemesterDataInput!
}

input BookListUpsertWithoutBooksInput {
  update: BookListUpdateWithoutBooksDataInput!
  create: BookListCreateWithoutBooksInput!
}

input BookListUpsertWithWhereUniqueWithoutDepartmentInput {
  where: BookListWhereUniqueInput!
  update: BookListUpdateWithoutDepartmentDataInput!
  create: BookListCreateWithoutDepartmentInput!
}

input BookListUpsertWithWhereUniqueWithoutSemesterInput {
  where: BookListWhereUniqueInput!
  update: BookListUpdateWithoutSemesterDataInput!
  create: BookListCreateWithoutSemesterInput!
}

input BookListWhereInput {
  """Logical AND on all given filters."""
  AND: [BookListWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookListWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookListWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  probidan: String

  """All values that are not equal to given value."""
  probidan_not: String

  """All values that are contained in given list."""
  probidan_in: [String!]

  """All values that are not contained in given list."""
  probidan_not_in: [String!]

  """All values less than the given value."""
  probidan_lt: String

  """All values less than or equal the given value."""
  probidan_lte: String

  """All values greater than the given value."""
  probidan_gt: String

  """All values greater than or equal the given value."""
  probidan_gte: String

  """All values containing the given string."""
  probidan_contains: String

  """All values not containing the given string."""
  probidan_not_contains: String

  """All values starting with the given string."""
  probidan_starts_with: String

  """All values not starting with the given string."""
  probidan_not_starts_with: String

  """All values ending with the given string."""
  probidan_ends_with: String

  """All values not ending with the given string."""
  probidan_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  department: DepartmentWhereInput
  semester: SemesterWhereInput
  books_every: BookWhereInput
  books_some: BookWhereInput
  books_none: BookWhereInput
}

input BookListWhereUniqueInput {
  id: ID
}

enum BookOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  code_ASC
  code_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BookPreviousValues {
  id: ID!
  name: String!
  code: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input BookScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BookScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type BookSubscriptionPayload {
  mutation: MutationType!
  node: Book
  updatedFields: [String!]
  previousValues: BookPreviousValues
}

input BookSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookWhereInput
}

input BookUpdateInput {
  name: String
  code: String
  bookList: BookListUpdateOneRequiredWithoutBooksInput
  classes: ClassUpdateManyWithoutSubjectInput
}

input BookUpdateManyDataInput {
  name: String
  code: String
}

input BookUpdateManyMutationInput {
  name: String
  code: String
}

input BookUpdateManyWithoutBookListInput {
  create: [BookCreateWithoutBookListInput!]
  connect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  delete: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutBookListInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  deleteMany: [BookScalarWhereInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutBookListInput!]
}

input BookUpdateManyWithWhereNestedInput {
  where: BookScalarWhereInput!
  data: BookUpdateManyDataInput!
}

input BookUpdateOneRequiredWithoutClassesInput {
  create: BookCreateWithoutClassesInput
  connect: BookWhereUniqueInput
  update: BookUpdateWithoutClassesDataInput
  upsert: BookUpsertWithoutClassesInput
}

input BookUpdateWithoutBookListDataInput {
  name: String
  code: String
  classes: ClassUpdateManyWithoutSubjectInput
}

input BookUpdateWithoutClassesDataInput {
  name: String
  code: String
  bookList: BookListUpdateOneRequiredWithoutBooksInput
}

input BookUpdateWithWhereUniqueWithoutBookListInput {
  where: BookWhereUniqueInput!
  data: BookUpdateWithoutBookListDataInput!
}

input BookUpsertWithoutClassesInput {
  update: BookUpdateWithoutClassesDataInput!
  create: BookCreateWithoutClassesInput!
}

input BookUpsertWithWhereUniqueWithoutBookListInput {
  where: BookWhereUniqueInput!
  update: BookUpdateWithoutBookListDataInput!
  create: BookCreateWithoutBookListInput!
}

input BookWhereInput {
  """Logical AND on all given filters."""
  AND: [BookWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  bookList: BookListWhereInput
  classes_every: ClassWhereInput
  classes_some: ClassWhereInput
  classes_none: ClassWhereInput
}

input BookWhereUniqueInput {
  id: ID
}

type Class implements Node {
  id: ID!
  day: DayInWeek!
  semester: Semester!
  period: Period!
  mentor: Teacher!
  department: Department!
  subject: Book!
  attendenceClasses(where: AttendenceClassWhereInput, orderBy: AttendenceClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AttendenceClass!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ClassConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClassEdge]!
  aggregate: AggregateClass!
}

input ClassCreateInput {
  id: ID
  day: DayInWeekCreateOneWithoutClassesInput!
  semester: SemesterCreateOneWithoutClassesInput!
  period: PeriodCreateOneInput!
  mentor: TeacherCreateOneWithoutClassesInput!
  department: DepartmentCreateOneWithoutClassesInput!
  subject: BookCreateOneWithoutClassesInput!
  attendenceClasses: AttendenceClassCreateManyWithoutClassInput
}

input ClassCreateManyWithoutDayInput {
  create: [ClassCreateWithoutDayInput!]
  connect: [ClassWhereUniqueInput!]
}

input ClassCreateManyWithoutDepartmentInput {
  create: [ClassCreateWithoutDepartmentInput!]
  connect: [ClassWhereUniqueInput!]
}

input ClassCreateManyWithoutMentorInput {
  create: [ClassCreateWithoutMentorInput!]
  connect: [ClassWhereUniqueInput!]
}

input ClassCreateManyWithoutSemesterInput {
  create: [ClassCreateWithoutSemesterInput!]
  connect: [ClassWhereUniqueInput!]
}

input ClassCreateManyWithoutSubjectInput {
  create: [ClassCreateWithoutSubjectInput!]
  connect: [ClassWhereUniqueInput!]
}

input ClassCreateOneWithoutAttendenceClassesInput {
  create: ClassCreateWithoutAttendenceClassesInput
  connect: ClassWhereUniqueInput
}

input ClassCreateWithoutAttendenceClassesInput {
  id: ID
  day: DayInWeekCreateOneWithoutClassesInput!
  semester: SemesterCreateOneWithoutClassesInput!
  period: PeriodCreateOneInput!
  mentor: TeacherCreateOneWithoutClassesInput!
  department: DepartmentCreateOneWithoutClassesInput!
  subject: BookCreateOneWithoutClassesInput!
}

input ClassCreateWithoutDayInput {
  id: ID
  semester: SemesterCreateOneWithoutClassesInput!
  period: PeriodCreateOneInput!
  mentor: TeacherCreateOneWithoutClassesInput!
  department: DepartmentCreateOneWithoutClassesInput!
  subject: BookCreateOneWithoutClassesInput!
  attendenceClasses: AttendenceClassCreateManyWithoutClassInput
}

input ClassCreateWithoutDepartmentInput {
  id: ID
  day: DayInWeekCreateOneWithoutClassesInput!
  semester: SemesterCreateOneWithoutClassesInput!
  period: PeriodCreateOneInput!
  mentor: TeacherCreateOneWithoutClassesInput!
  subject: BookCreateOneWithoutClassesInput!
  attendenceClasses: AttendenceClassCreateManyWithoutClassInput
}

input ClassCreateWithoutMentorInput {
  id: ID
  day: DayInWeekCreateOneWithoutClassesInput!
  semester: SemesterCreateOneWithoutClassesInput!
  period: PeriodCreateOneInput!
  department: DepartmentCreateOneWithoutClassesInput!
  subject: BookCreateOneWithoutClassesInput!
  attendenceClasses: AttendenceClassCreateManyWithoutClassInput
}

input ClassCreateWithoutSemesterInput {
  id: ID
  day: DayInWeekCreateOneWithoutClassesInput!
  period: PeriodCreateOneInput!
  mentor: TeacherCreateOneWithoutClassesInput!
  department: DepartmentCreateOneWithoutClassesInput!
  subject: BookCreateOneWithoutClassesInput!
  attendenceClasses: AttendenceClassCreateManyWithoutClassInput
}

input ClassCreateWithoutSubjectInput {
  id: ID
  day: DayInWeekCreateOneWithoutClassesInput!
  semester: SemesterCreateOneWithoutClassesInput!
  period: PeriodCreateOneInput!
  mentor: TeacherCreateOneWithoutClassesInput!
  department: DepartmentCreateOneWithoutClassesInput!
  attendenceClasses: AttendenceClassCreateManyWithoutClassInput
}

"""An edge in a connection."""
type ClassEdge {
  """The item at the end of the edge."""
  node: Class!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ClassOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ClassPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ClassScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ClassSubscriptionPayload {
  mutation: MutationType!
  node: Class
  updatedFields: [String!]
  previousValues: ClassPreviousValues
}

input ClassSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ClassWhereInput
}

input ClassUpdateInput {
  day: DayInWeekUpdateOneRequiredWithoutClassesInput
  semester: SemesterUpdateOneRequiredWithoutClassesInput
  period: PeriodUpdateOneRequiredInput
  mentor: TeacherUpdateOneRequiredWithoutClassesInput
  department: DepartmentUpdateOneRequiredWithoutClassesInput
  subject: BookUpdateOneRequiredWithoutClassesInput
  attendenceClasses: AttendenceClassUpdateManyWithoutClassInput
}

input ClassUpdateManyWithoutDayInput {
  create: [ClassCreateWithoutDayInput!]
  connect: [ClassWhereUniqueInput!]
  set: [ClassWhereUniqueInput!]
  disconnect: [ClassWhereUniqueInput!]
  delete: [ClassWhereUniqueInput!]
  update: [ClassUpdateWithWhereUniqueWithoutDayInput!]
  deleteMany: [ClassScalarWhereInput!]
  upsert: [ClassUpsertWithWhereUniqueWithoutDayInput!]
}

input ClassUpdateManyWithoutDepartmentInput {
  create: [ClassCreateWithoutDepartmentInput!]
  connect: [ClassWhereUniqueInput!]
  set: [ClassWhereUniqueInput!]
  disconnect: [ClassWhereUniqueInput!]
  delete: [ClassWhereUniqueInput!]
  update: [ClassUpdateWithWhereUniqueWithoutDepartmentInput!]
  deleteMany: [ClassScalarWhereInput!]
  upsert: [ClassUpsertWithWhereUniqueWithoutDepartmentInput!]
}

input ClassUpdateManyWithoutMentorInput {
  create: [ClassCreateWithoutMentorInput!]
  connect: [ClassWhereUniqueInput!]
  set: [ClassWhereUniqueInput!]
  disconnect: [ClassWhereUniqueInput!]
  delete: [ClassWhereUniqueInput!]
  update: [ClassUpdateWithWhereUniqueWithoutMentorInput!]
  deleteMany: [ClassScalarWhereInput!]
  upsert: [ClassUpsertWithWhereUniqueWithoutMentorInput!]
}

input ClassUpdateManyWithoutSemesterInput {
  create: [ClassCreateWithoutSemesterInput!]
  connect: [ClassWhereUniqueInput!]
  set: [ClassWhereUniqueInput!]
  disconnect: [ClassWhereUniqueInput!]
  delete: [ClassWhereUniqueInput!]
  update: [ClassUpdateWithWhereUniqueWithoutSemesterInput!]
  deleteMany: [ClassScalarWhereInput!]
  upsert: [ClassUpsertWithWhereUniqueWithoutSemesterInput!]
}

input ClassUpdateManyWithoutSubjectInput {
  create: [ClassCreateWithoutSubjectInput!]
  connect: [ClassWhereUniqueInput!]
  set: [ClassWhereUniqueInput!]
  disconnect: [ClassWhereUniqueInput!]
  delete: [ClassWhereUniqueInput!]
  update: [ClassUpdateWithWhereUniqueWithoutSubjectInput!]
  deleteMany: [ClassScalarWhereInput!]
  upsert: [ClassUpsertWithWhereUniqueWithoutSubjectInput!]
}

input ClassUpdateOneRequiredWithoutAttendenceClassesInput {
  create: ClassCreateWithoutAttendenceClassesInput
  connect: ClassWhereUniqueInput
  update: ClassUpdateWithoutAttendenceClassesDataInput
  upsert: ClassUpsertWithoutAttendenceClassesInput
}

input ClassUpdateWithoutAttendenceClassesDataInput {
  day: DayInWeekUpdateOneRequiredWithoutClassesInput
  semester: SemesterUpdateOneRequiredWithoutClassesInput
  period: PeriodUpdateOneRequiredInput
  mentor: TeacherUpdateOneRequiredWithoutClassesInput
  department: DepartmentUpdateOneRequiredWithoutClassesInput
  subject: BookUpdateOneRequiredWithoutClassesInput
}

input ClassUpdateWithoutDayDataInput {
  semester: SemesterUpdateOneRequiredWithoutClassesInput
  period: PeriodUpdateOneRequiredInput
  mentor: TeacherUpdateOneRequiredWithoutClassesInput
  department: DepartmentUpdateOneRequiredWithoutClassesInput
  subject: BookUpdateOneRequiredWithoutClassesInput
  attendenceClasses: AttendenceClassUpdateManyWithoutClassInput
}

input ClassUpdateWithoutDepartmentDataInput {
  day: DayInWeekUpdateOneRequiredWithoutClassesInput
  semester: SemesterUpdateOneRequiredWithoutClassesInput
  period: PeriodUpdateOneRequiredInput
  mentor: TeacherUpdateOneRequiredWithoutClassesInput
  subject: BookUpdateOneRequiredWithoutClassesInput
  attendenceClasses: AttendenceClassUpdateManyWithoutClassInput
}

input ClassUpdateWithoutMentorDataInput {
  day: DayInWeekUpdateOneRequiredWithoutClassesInput
  semester: SemesterUpdateOneRequiredWithoutClassesInput
  period: PeriodUpdateOneRequiredInput
  department: DepartmentUpdateOneRequiredWithoutClassesInput
  subject: BookUpdateOneRequiredWithoutClassesInput
  attendenceClasses: AttendenceClassUpdateManyWithoutClassInput
}

input ClassUpdateWithoutSemesterDataInput {
  day: DayInWeekUpdateOneRequiredWithoutClassesInput
  period: PeriodUpdateOneRequiredInput
  mentor: TeacherUpdateOneRequiredWithoutClassesInput
  department: DepartmentUpdateOneRequiredWithoutClassesInput
  subject: BookUpdateOneRequiredWithoutClassesInput
  attendenceClasses: AttendenceClassUpdateManyWithoutClassInput
}

input ClassUpdateWithoutSubjectDataInput {
  day: DayInWeekUpdateOneRequiredWithoutClassesInput
  semester: SemesterUpdateOneRequiredWithoutClassesInput
  period: PeriodUpdateOneRequiredInput
  mentor: TeacherUpdateOneRequiredWithoutClassesInput
  department: DepartmentUpdateOneRequiredWithoutClassesInput
  attendenceClasses: AttendenceClassUpdateManyWithoutClassInput
}

input ClassUpdateWithWhereUniqueWithoutDayInput {
  where: ClassWhereUniqueInput!
  data: ClassUpdateWithoutDayDataInput!
}

input ClassUpdateWithWhereUniqueWithoutDepartmentInput {
  where: ClassWhereUniqueInput!
  data: ClassUpdateWithoutDepartmentDataInput!
}

input ClassUpdateWithWhereUniqueWithoutMentorInput {
  where: ClassWhereUniqueInput!
  data: ClassUpdateWithoutMentorDataInput!
}

input ClassUpdateWithWhereUniqueWithoutSemesterInput {
  where: ClassWhereUniqueInput!
  data: ClassUpdateWithoutSemesterDataInput!
}

input ClassUpdateWithWhereUniqueWithoutSubjectInput {
  where: ClassWhereUniqueInput!
  data: ClassUpdateWithoutSubjectDataInput!
}

input ClassUpsertWithoutAttendenceClassesInput {
  update: ClassUpdateWithoutAttendenceClassesDataInput!
  create: ClassCreateWithoutAttendenceClassesInput!
}

input ClassUpsertWithWhereUniqueWithoutDayInput {
  where: ClassWhereUniqueInput!
  update: ClassUpdateWithoutDayDataInput!
  create: ClassCreateWithoutDayInput!
}

input ClassUpsertWithWhereUniqueWithoutDepartmentInput {
  where: ClassWhereUniqueInput!
  update: ClassUpdateWithoutDepartmentDataInput!
  create: ClassCreateWithoutDepartmentInput!
}

input ClassUpsertWithWhereUniqueWithoutMentorInput {
  where: ClassWhereUniqueInput!
  update: ClassUpdateWithoutMentorDataInput!
  create: ClassCreateWithoutMentorInput!
}

input ClassUpsertWithWhereUniqueWithoutSemesterInput {
  where: ClassWhereUniqueInput!
  update: ClassUpdateWithoutSemesterDataInput!
  create: ClassCreateWithoutSemesterInput!
}

input ClassUpsertWithWhereUniqueWithoutSubjectInput {
  where: ClassWhereUniqueInput!
  update: ClassUpdateWithoutSubjectDataInput!
  create: ClassCreateWithoutSubjectInput!
}

input ClassWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  day: DayInWeekWhereInput
  semester: SemesterWhereInput
  period: PeriodWhereInput
  mentor: TeacherWhereInput
  department: DepartmentWhereInput
  subject: BookWhereInput
  attendenceClasses_every: AttendenceClassWhereInput
  attendenceClasses_some: AttendenceClassWhereInput
  attendenceClasses_none: AttendenceClassWhereInput
}

input ClassWhereUniqueInput {
  id: ID
}

scalar DateTime

type DayInWeek implements Node {
  id: ID!
  routine: Routine!
  dayValue: Int!
  day: DayTypes!
  classes(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Class!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DayInWeekConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DayInWeekEdge]!
  aggregate: AggregateDayInWeek!
}

input DayInWeekCreateInput {
  id: ID
  dayValue: Int!
  day: DayTypes!
  routine: RoutineCreateOneWithoutDaysInput!
  classes: ClassCreateManyWithoutDayInput
}

input DayInWeekCreateManyWithoutRoutineInput {
  create: [DayInWeekCreateWithoutRoutineInput!]
  connect: [DayInWeekWhereUniqueInput!]
}

input DayInWeekCreateOneWithoutClassesInput {
  create: DayInWeekCreateWithoutClassesInput
  connect: DayInWeekWhereUniqueInput
}

input DayInWeekCreateWithoutClassesInput {
  id: ID
  dayValue: Int!
  day: DayTypes!
  routine: RoutineCreateOneWithoutDaysInput!
}

input DayInWeekCreateWithoutRoutineInput {
  id: ID
  dayValue: Int!
  day: DayTypes!
  classes: ClassCreateManyWithoutDayInput
}

"""An edge in a connection."""
type DayInWeekEdge {
  """The item at the end of the edge."""
  node: DayInWeek!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DayInWeekOrderByInput {
  id_ASC
  id_DESC
  dayValue_ASC
  dayValue_DESC
  day_ASC
  day_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DayInWeekPreviousValues {
  id: ID!
  dayValue: Int!
  day: DayTypes!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DayInWeekScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DayInWeekScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DayInWeekScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DayInWeekScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  dayValue: Int

  """All values that are not equal to given value."""
  dayValue_not: Int

  """All values that are contained in given list."""
  dayValue_in: [Int!]

  """All values that are not contained in given list."""
  dayValue_not_in: [Int!]

  """All values less than the given value."""
  dayValue_lt: Int

  """All values less than or equal the given value."""
  dayValue_lte: Int

  """All values greater than the given value."""
  dayValue_gt: Int

  """All values greater than or equal the given value."""
  dayValue_gte: Int
  day: DayTypes

  """All values that are not equal to given value."""
  day_not: DayTypes

  """All values that are contained in given list."""
  day_in: [DayTypes!]

  """All values that are not contained in given list."""
  day_not_in: [DayTypes!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type DayInWeekSubscriptionPayload {
  mutation: MutationType!
  node: DayInWeek
  updatedFields: [String!]
  previousValues: DayInWeekPreviousValues
}

input DayInWeekSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DayInWeekSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DayInWeekSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DayInWeekSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DayInWeekWhereInput
}

input DayInWeekUpdateInput {
  dayValue: Int
  day: DayTypes
  routine: RoutineUpdateOneRequiredWithoutDaysInput
  classes: ClassUpdateManyWithoutDayInput
}

input DayInWeekUpdateManyDataInput {
  dayValue: Int
  day: DayTypes
}

input DayInWeekUpdateManyMutationInput {
  dayValue: Int
  day: DayTypes
}

input DayInWeekUpdateManyWithoutRoutineInput {
  create: [DayInWeekCreateWithoutRoutineInput!]
  connect: [DayInWeekWhereUniqueInput!]
  set: [DayInWeekWhereUniqueInput!]
  disconnect: [DayInWeekWhereUniqueInput!]
  delete: [DayInWeekWhereUniqueInput!]
  update: [DayInWeekUpdateWithWhereUniqueWithoutRoutineInput!]
  updateMany: [DayInWeekUpdateManyWithWhereNestedInput!]
  deleteMany: [DayInWeekScalarWhereInput!]
  upsert: [DayInWeekUpsertWithWhereUniqueWithoutRoutineInput!]
}

input DayInWeekUpdateManyWithWhereNestedInput {
  where: DayInWeekScalarWhereInput!
  data: DayInWeekUpdateManyDataInput!
}

input DayInWeekUpdateOneRequiredWithoutClassesInput {
  create: DayInWeekCreateWithoutClassesInput
  connect: DayInWeekWhereUniqueInput
  update: DayInWeekUpdateWithoutClassesDataInput
  upsert: DayInWeekUpsertWithoutClassesInput
}

input DayInWeekUpdateWithoutClassesDataInput {
  dayValue: Int
  day: DayTypes
  routine: RoutineUpdateOneRequiredWithoutDaysInput
}

input DayInWeekUpdateWithoutRoutineDataInput {
  dayValue: Int
  day: DayTypes
  classes: ClassUpdateManyWithoutDayInput
}

input DayInWeekUpdateWithWhereUniqueWithoutRoutineInput {
  where: DayInWeekWhereUniqueInput!
  data: DayInWeekUpdateWithoutRoutineDataInput!
}

input DayInWeekUpsertWithoutClassesInput {
  update: DayInWeekUpdateWithoutClassesDataInput!
  create: DayInWeekCreateWithoutClassesInput!
}

input DayInWeekUpsertWithWhereUniqueWithoutRoutineInput {
  where: DayInWeekWhereUniqueInput!
  update: DayInWeekUpdateWithoutRoutineDataInput!
  create: DayInWeekCreateWithoutRoutineInput!
}

input DayInWeekWhereInput {
  """Logical AND on all given filters."""
  AND: [DayInWeekWhereInput!]

  """Logical OR on all given filters."""
  OR: [DayInWeekWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DayInWeekWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  dayValue: Int

  """All values that are not equal to given value."""
  dayValue_not: Int

  """All values that are contained in given list."""
  dayValue_in: [Int!]

  """All values that are not contained in given list."""
  dayValue_not_in: [Int!]

  """All values less than the given value."""
  dayValue_lt: Int

  """All values less than or equal the given value."""
  dayValue_lte: Int

  """All values greater than the given value."""
  dayValue_gt: Int

  """All values greater than or equal the given value."""
  dayValue_gte: Int
  day: DayTypes

  """All values that are not equal to given value."""
  day_not: DayTypes

  """All values that are contained in given list."""
  day_in: [DayTypes!]

  """All values that are not contained in given list."""
  day_not_in: [DayTypes!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  routine: RoutineWhereInput
  classes_every: ClassWhereInput
  classes_some: ClassWhereInput
  classes_none: ClassWhereInput
}

input DayInWeekWhereUniqueInput {
  id: ID
}

enum DayTypes {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

type Department implements Node {
  id: ID!
  name: String!
  students(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Student!]
  bookLists(where: BookListWhereInput, orderBy: BookListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookList!]
  routines(where: RoutineWhereInput, orderBy: RoutineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Routine!]
  classes(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Class!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DepartmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DepartmentEdge]!
  aggregate: AggregateDepartment!
}

input DepartmentCreateInput {
  id: ID
  name: String!
  students: StudentCreateManyWithoutDepartmentInput
  bookLists: BookListCreateManyWithoutDepartmentInput
  routines: RoutineCreateManyWithoutDepartmentInput
  classes: ClassCreateManyWithoutDepartmentInput
}

input DepartmentCreateOneWithoutBookListsInput {
  create: DepartmentCreateWithoutBookListsInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentCreateOneWithoutClassesInput {
  create: DepartmentCreateWithoutClassesInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentCreateOneWithoutRoutinesInput {
  create: DepartmentCreateWithoutRoutinesInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentCreateOneWithoutStudentsInput {
  create: DepartmentCreateWithoutStudentsInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentCreateWithoutBookListsInput {
  id: ID
  name: String!
  students: StudentCreateManyWithoutDepartmentInput
  routines: RoutineCreateManyWithoutDepartmentInput
  classes: ClassCreateManyWithoutDepartmentInput
}

input DepartmentCreateWithoutClassesInput {
  id: ID
  name: String!
  students: StudentCreateManyWithoutDepartmentInput
  bookLists: BookListCreateManyWithoutDepartmentInput
  routines: RoutineCreateManyWithoutDepartmentInput
}

input DepartmentCreateWithoutRoutinesInput {
  id: ID
  name: String!
  students: StudentCreateManyWithoutDepartmentInput
  bookLists: BookListCreateManyWithoutDepartmentInput
  classes: ClassCreateManyWithoutDepartmentInput
}

input DepartmentCreateWithoutStudentsInput {
  id: ID
  name: String!
  bookLists: BookListCreateManyWithoutDepartmentInput
  routines: RoutineCreateManyWithoutDepartmentInput
  classes: ClassCreateManyWithoutDepartmentInput
}

"""An edge in a connection."""
type DepartmentEdge {
  """The item at the end of the edge."""
  node: Department!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DepartmentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DepartmentPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DepartmentSubscriptionPayload {
  mutation: MutationType!
  node: Department
  updatedFields: [String!]
  previousValues: DepartmentPreviousValues
}

input DepartmentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DepartmentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DepartmentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DepartmentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DepartmentWhereInput
}

input DepartmentUpdateInput {
  name: String
  students: StudentUpdateManyWithoutDepartmentInput
  bookLists: BookListUpdateManyWithoutDepartmentInput
  routines: RoutineUpdateManyWithoutDepartmentInput
  classes: ClassUpdateManyWithoutDepartmentInput
}

input DepartmentUpdateManyMutationInput {
  name: String
}

input DepartmentUpdateOneRequiredWithoutBookListsInput {
  create: DepartmentCreateWithoutBookListsInput
  connect: DepartmentWhereUniqueInput
  update: DepartmentUpdateWithoutBookListsDataInput
  upsert: DepartmentUpsertWithoutBookListsInput
}

input DepartmentUpdateOneRequiredWithoutClassesInput {
  create: DepartmentCreateWithoutClassesInput
  connect: DepartmentWhereUniqueInput
  update: DepartmentUpdateWithoutClassesDataInput
  upsert: DepartmentUpsertWithoutClassesInput
}

input DepartmentUpdateOneRequiredWithoutRoutinesInput {
  create: DepartmentCreateWithoutRoutinesInput
  connect: DepartmentWhereUniqueInput
  update: DepartmentUpdateWithoutRoutinesDataInput
  upsert: DepartmentUpsertWithoutRoutinesInput
}

input DepartmentUpdateOneRequiredWithoutStudentsInput {
  create: DepartmentCreateWithoutStudentsInput
  connect: DepartmentWhereUniqueInput
  update: DepartmentUpdateWithoutStudentsDataInput
  upsert: DepartmentUpsertWithoutStudentsInput
}

input DepartmentUpdateWithoutBookListsDataInput {
  name: String
  students: StudentUpdateManyWithoutDepartmentInput
  routines: RoutineUpdateManyWithoutDepartmentInput
  classes: ClassUpdateManyWithoutDepartmentInput
}

input DepartmentUpdateWithoutClassesDataInput {
  name: String
  students: StudentUpdateManyWithoutDepartmentInput
  bookLists: BookListUpdateManyWithoutDepartmentInput
  routines: RoutineUpdateManyWithoutDepartmentInput
}

input DepartmentUpdateWithoutRoutinesDataInput {
  name: String
  students: StudentUpdateManyWithoutDepartmentInput
  bookLists: BookListUpdateManyWithoutDepartmentInput
  classes: ClassUpdateManyWithoutDepartmentInput
}

input DepartmentUpdateWithoutStudentsDataInput {
  name: String
  bookLists: BookListUpdateManyWithoutDepartmentInput
  routines: RoutineUpdateManyWithoutDepartmentInput
  classes: ClassUpdateManyWithoutDepartmentInput
}

input DepartmentUpsertWithoutBookListsInput {
  update: DepartmentUpdateWithoutBookListsDataInput!
  create: DepartmentCreateWithoutBookListsInput!
}

input DepartmentUpsertWithoutClassesInput {
  update: DepartmentUpdateWithoutClassesDataInput!
  create: DepartmentCreateWithoutClassesInput!
}

input DepartmentUpsertWithoutRoutinesInput {
  update: DepartmentUpdateWithoutRoutinesDataInput!
  create: DepartmentCreateWithoutRoutinesInput!
}

input DepartmentUpsertWithoutStudentsInput {
  update: DepartmentUpdateWithoutStudentsDataInput!
  create: DepartmentCreateWithoutStudentsInput!
}

input DepartmentWhereInput {
  """Logical AND on all given filters."""
  AND: [DepartmentWhereInput!]

  """Logical OR on all given filters."""
  OR: [DepartmentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DepartmentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  students_every: StudentWhereInput
  students_some: StudentWhereInput
  students_none: StudentWhereInput
  bookLists_every: BookListWhereInput
  bookLists_some: BookListWhereInput
  bookLists_none: BookListWhereInput
  routines_every: RoutineWhereInput
  routines_some: RoutineWhereInput
  routines_none: RoutineWhereInput
  classes_every: ClassWhereInput
  classes_some: ClassWhereInput
  classes_none: ClassWhereInput
}

input DepartmentWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createAdmin(data: AdminCreateInput!): Admin!
  createTeacher(data: TeacherCreateInput!): Teacher!
  createNote(data: NoteCreateInput!): Note!
  createNotice(data: NoticeCreateInput!): Notice!
  createDepartment(data: DepartmentCreateInput!): Department!
  createSession(data: SessionCreateInput!): Session!
  createStudent(data: StudentCreateInput!): Student!
  createSemester(data: SemesterCreateInput!): Semester!
  createBookList(data: BookListCreateInput!): BookList!
  createBook(data: BookCreateInput!): Book!
  createRoutine(data: RoutineCreateInput!): Routine!
  createDayInWeek(data: DayInWeekCreateInput!): DayInWeek!
  createClass(data: ClassCreateInput!): Class!
  createAttendenceDay(data: AttendenceDayCreateInput!): AttendenceDay!
  createAttendenceClass(data: AttendenceClassCreateInput!): AttendenceClass!
  createAttendence(data: AttendenceCreateInput!): Attendence!
  createPeriod(data: PeriodCreateInput!): Period!
  updateAdmin(data: AdminUpdateInput!, where: AdminWhereUniqueInput!): Admin
  updateTeacher(data: TeacherUpdateInput!, where: TeacherWhereUniqueInput!): Teacher
  updateNote(data: NoteUpdateInput!, where: NoteWhereUniqueInput!): Note
  updateNotice(data: NoticeUpdateInput!, where: NoticeWhereUniqueInput!): Notice
  updateDepartment(data: DepartmentUpdateInput!, where: DepartmentWhereUniqueInput!): Department
  updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  updateStudent(data: StudentUpdateInput!, where: StudentWhereUniqueInput!): Student
  updateSemester(data: SemesterUpdateInput!, where: SemesterWhereUniqueInput!): Semester
  updateBookList(data: BookListUpdateInput!, where: BookListWhereUniqueInput!): BookList
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateRoutine(data: RoutineUpdateInput!, where: RoutineWhereUniqueInput!): Routine
  updateDayInWeek(data: DayInWeekUpdateInput!, where: DayInWeekWhereUniqueInput!): DayInWeek
  updateClass(data: ClassUpdateInput!, where: ClassWhereUniqueInput!): Class
  updateAttendenceDay(data: AttendenceDayUpdateInput!, where: AttendenceDayWhereUniqueInput!): AttendenceDay
  updateAttendenceClass(data: AttendenceClassUpdateInput!, where: AttendenceClassWhereUniqueInput!): AttendenceClass
  updateAttendence(data: AttendenceUpdateInput!, where: AttendenceWhereUniqueInput!): Attendence
  updatePeriod(data: PeriodUpdateInput!, where: PeriodWhereUniqueInput!): Period
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deleteTeacher(where: TeacherWhereUniqueInput!): Teacher
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteNotice(where: NoticeWhereUniqueInput!): Notice
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteStudent(where: StudentWhereUniqueInput!): Student
  deleteSemester(where: SemesterWhereUniqueInput!): Semester
  deleteBookList(where: BookListWhereUniqueInput!): BookList
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteRoutine(where: RoutineWhereUniqueInput!): Routine
  deleteDayInWeek(where: DayInWeekWhereUniqueInput!): DayInWeek
  deleteClass(where: ClassWhereUniqueInput!): Class
  deleteAttendenceDay(where: AttendenceDayWhereUniqueInput!): AttendenceDay
  deleteAttendenceClass(where: AttendenceClassWhereUniqueInput!): AttendenceClass
  deleteAttendence(where: AttendenceWhereUniqueInput!): Attendence
  deletePeriod(where: PeriodWhereUniqueInput!): Period
  upsertAdmin(where: AdminWhereUniqueInput!, create: AdminCreateInput!, update: AdminUpdateInput!): Admin!
  upsertTeacher(where: TeacherWhereUniqueInput!, create: TeacherCreateInput!, update: TeacherUpdateInput!): Teacher!
  upsertNote(where: NoteWhereUniqueInput!, create: NoteCreateInput!, update: NoteUpdateInput!): Note!
  upsertNotice(where: NoticeWhereUniqueInput!, create: NoticeCreateInput!, update: NoticeUpdateInput!): Notice!
  upsertDepartment(where: DepartmentWhereUniqueInput!, create: DepartmentCreateInput!, update: DepartmentUpdateInput!): Department!
  upsertSession(where: SessionWhereUniqueInput!, create: SessionCreateInput!, update: SessionUpdateInput!): Session!
  upsertStudent(where: StudentWhereUniqueInput!, create: StudentCreateInput!, update: StudentUpdateInput!): Student!
  upsertSemester(where: SemesterWhereUniqueInput!, create: SemesterCreateInput!, update: SemesterUpdateInput!): Semester!
  upsertBookList(where: BookListWhereUniqueInput!, create: BookListCreateInput!, update: BookListUpdateInput!): BookList!
  upsertBook(where: BookWhereUniqueInput!, create: BookCreateInput!, update: BookUpdateInput!): Book!
  upsertRoutine(where: RoutineWhereUniqueInput!, create: RoutineCreateInput!, update: RoutineUpdateInput!): Routine!
  upsertDayInWeek(where: DayInWeekWhereUniqueInput!, create: DayInWeekCreateInput!, update: DayInWeekUpdateInput!): DayInWeek!
  upsertClass(where: ClassWhereUniqueInput!, create: ClassCreateInput!, update: ClassUpdateInput!): Class!
  upsertAttendenceDay(where: AttendenceDayWhereUniqueInput!, create: AttendenceDayCreateInput!, update: AttendenceDayUpdateInput!): AttendenceDay!
  upsertAttendenceClass(where: AttendenceClassWhereUniqueInput!, create: AttendenceClassCreateInput!, update: AttendenceClassUpdateInput!): AttendenceClass!
  upsertAttendence(where: AttendenceWhereUniqueInput!, create: AttendenceCreateInput!, update: AttendenceUpdateInput!): Attendence!
  upsertPeriod(where: PeriodWhereUniqueInput!, create: PeriodCreateInput!, update: PeriodUpdateInput!): Period!
  updateManyAdmins(data: AdminUpdateManyMutationInput!, where: AdminWhereInput): BatchPayload!
  updateManyTeachers(data: TeacherUpdateManyMutationInput!, where: TeacherWhereInput): BatchPayload!
  updateManyNotes(data: NoteUpdateManyMutationInput!, where: NoteWhereInput): BatchPayload!
  updateManyNotices(data: NoticeUpdateManyMutationInput!, where: NoticeWhereInput): BatchPayload!
  updateManyDepartments(data: DepartmentUpdateManyMutationInput!, where: DepartmentWhereInput): BatchPayload!
  updateManySessions(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): BatchPayload!
  updateManyStudents(data: StudentUpdateManyMutationInput!, where: StudentWhereInput): BatchPayload!
  updateManySemesters(data: SemesterUpdateManyMutationInput!, where: SemesterWhereInput): BatchPayload!
  updateManyBookLists(data: BookListUpdateManyMutationInput!, where: BookListWhereInput): BatchPayload!
  updateManyBooks(data: BookUpdateManyMutationInput!, where: BookWhereInput): BatchPayload!
  updateManyRoutines(data: RoutineUpdateManyMutationInput!, where: RoutineWhereInput): BatchPayload!
  updateManyDayInWeeks(data: DayInWeekUpdateManyMutationInput!, where: DayInWeekWhereInput): BatchPayload!
  updateManyAttendenceDays(data: AttendenceDayUpdateManyMutationInput!, where: AttendenceDayWhereInput): BatchPayload!
  updateManyAttendences(data: AttendenceUpdateManyMutationInput!, where: AttendenceWhereInput): BatchPayload!
  updateManyPeriods(data: PeriodUpdateManyMutationInput!, where: PeriodWhereInput): BatchPayload!
  deleteManyAdmins(where: AdminWhereInput): BatchPayload!
  deleteManyTeachers(where: TeacherWhereInput): BatchPayload!
  deleteManyNotes(where: NoteWhereInput): BatchPayload!
  deleteManyNotices(where: NoticeWhereInput): BatchPayload!
  deleteManyDepartments(where: DepartmentWhereInput): BatchPayload!
  deleteManySessions(where: SessionWhereInput): BatchPayload!
  deleteManyStudents(where: StudentWhereInput): BatchPayload!
  deleteManySemesters(where: SemesterWhereInput): BatchPayload!
  deleteManyBookLists(where: BookListWhereInput): BatchPayload!
  deleteManyBooks(where: BookWhereInput): BatchPayload!
  deleteManyRoutines(where: RoutineWhereInput): BatchPayload!
  deleteManyDayInWeeks(where: DayInWeekWhereInput): BatchPayload!
  deleteManyClasses(where: ClassWhereInput): BatchPayload!
  deleteManyAttendenceDays(where: AttendenceDayWhereInput): BatchPayload!
  deleteManyAttendenceClasses(where: AttendenceClassWhereInput): BatchPayload!
  deleteManyAttendences(where: AttendenceWhereInput): BatchPayload!
  deleteManyPeriods(where: PeriodWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Note implements Node {
  id: ID!
  title: String!
  text: String!
  author: Student!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type NoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NoteEdge]!
  aggregate: AggregateNote!
}

input NoteCreateInput {
  id: ID
  title: String!
  text: String!
  author: StudentCreateOneWithoutNotesInput!
}

input NoteCreateManyWithoutAuthorInput {
  create: [NoteCreateWithoutAuthorInput!]
  connect: [NoteWhereUniqueInput!]
}

input NoteCreateWithoutAuthorInput {
  id: ID
  title: String!
  text: String!
}

"""An edge in a connection."""
type NoteEdge {
  """The item at the end of the edge."""
  node: Note!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NoteOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NotePreviousValues {
  id: ID!
  title: String!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input NoteScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [NoteScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [NoteScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NoteScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type NoteSubscriptionPayload {
  mutation: MutationType!
  node: Note
  updatedFields: [String!]
  previousValues: NotePreviousValues
}

input NoteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NoteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NoteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NoteSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NoteWhereInput
}

input NoteUpdateInput {
  title: String
  text: String
  author: StudentUpdateOneRequiredWithoutNotesInput
}

input NoteUpdateManyDataInput {
  title: String
  text: String
}

input NoteUpdateManyMutationInput {
  title: String
  text: String
}

input NoteUpdateManyWithoutAuthorInput {
  create: [NoteCreateWithoutAuthorInput!]
  connect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  disconnect: [NoteWhereUniqueInput!]
  delete: [NoteWhereUniqueInput!]
  update: [NoteUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [NoteUpdateManyWithWhereNestedInput!]
  deleteMany: [NoteScalarWhereInput!]
  upsert: [NoteUpsertWithWhereUniqueWithoutAuthorInput!]
}

input NoteUpdateManyWithWhereNestedInput {
  where: NoteScalarWhereInput!
  data: NoteUpdateManyDataInput!
}

input NoteUpdateWithoutAuthorDataInput {
  title: String
  text: String
}

input NoteUpdateWithWhereUniqueWithoutAuthorInput {
  where: NoteWhereUniqueInput!
  data: NoteUpdateWithoutAuthorDataInput!
}

input NoteUpsertWithWhereUniqueWithoutAuthorInput {
  where: NoteWhereUniqueInput!
  update: NoteUpdateWithoutAuthorDataInput!
  create: NoteCreateWithoutAuthorInput!
}

input NoteWhereInput {
  """Logical AND on all given filters."""
  AND: [NoteWhereInput!]

  """Logical OR on all given filters."""
  OR: [NoteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NoteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  author: StudentWhereInput
}

input NoteWhereUniqueInput {
  id: ID
}

type Notice implements Node {
  id: ID!
  title: String!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type NoticeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NoticeEdge]!
  aggregate: AggregateNotice!
}

input NoticeCreateInput {
  id: ID
  title: String!
  text: String!
}

"""An edge in a connection."""
type NoticeEdge {
  """The item at the end of the edge."""
  node: Notice!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NoticeOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NoticePreviousValues {
  id: ID!
  title: String!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NoticeSubscriptionPayload {
  mutation: MutationType!
  node: Notice
  updatedFields: [String!]
  previousValues: NoticePreviousValues
}

input NoticeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NoticeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NoticeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NoticeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NoticeWhereInput
}

input NoticeUpdateInput {
  title: String
  text: String
}

input NoticeUpdateManyMutationInput {
  title: String
  text: String
}

input NoticeWhereInput {
  """Logical AND on all given filters."""
  AND: [NoticeWhereInput!]

  """Logical OR on all given filters."""
  OR: [NoticeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NoticeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input NoticeWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Period implements Node {
  id: ID!
  time: Int!
  startedAt: String!
  endAt: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PeriodConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PeriodEdge]!
  aggregate: AggregatePeriod!
}

input PeriodCreateInput {
  id: ID
  time: Int!
  startedAt: String!
  endAt: String!
}

input PeriodCreateOneInput {
  create: PeriodCreateInput
  connect: PeriodWhereUniqueInput
}

"""An edge in a connection."""
type PeriodEdge {
  """The item at the end of the edge."""
  node: Period!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PeriodOrderByInput {
  id_ASC
  id_DESC
  time_ASC
  time_DESC
  startedAt_ASC
  startedAt_DESC
  endAt_ASC
  endAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PeriodPreviousValues {
  id: ID!
  time: Int!
  startedAt: String!
  endAt: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PeriodSubscriptionPayload {
  mutation: MutationType!
  node: Period
  updatedFields: [String!]
  previousValues: PeriodPreviousValues
}

input PeriodSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PeriodSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PeriodSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PeriodSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PeriodWhereInput
}

input PeriodUpdateDataInput {
  time: Int
  startedAt: String
  endAt: String
}

input PeriodUpdateInput {
  time: Int
  startedAt: String
  endAt: String
}

input PeriodUpdateManyMutationInput {
  time: Int
  startedAt: String
  endAt: String
}

input PeriodUpdateOneRequiredInput {
  create: PeriodCreateInput
  connect: PeriodWhereUniqueInput
  update: PeriodUpdateDataInput
  upsert: PeriodUpsertNestedInput
}

input PeriodUpsertNestedInput {
  update: PeriodUpdateDataInput!
  create: PeriodCreateInput!
}

input PeriodWhereInput {
  """Logical AND on all given filters."""
  AND: [PeriodWhereInput!]

  """Logical OR on all given filters."""
  OR: [PeriodWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PeriodWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  time: Int

  """All values that are not equal to given value."""
  time_not: Int

  """All values that are contained in given list."""
  time_in: [Int!]

  """All values that are not contained in given list."""
  time_not_in: [Int!]

  """All values less than the given value."""
  time_lt: Int

  """All values less than or equal the given value."""
  time_lte: Int

  """All values greater than the given value."""
  time_gt: Int

  """All values greater than or equal the given value."""
  time_gte: Int
  startedAt: String

  """All values that are not equal to given value."""
  startedAt_not: String

  """All values that are contained in given list."""
  startedAt_in: [String!]

  """All values that are not contained in given list."""
  startedAt_not_in: [String!]

  """All values less than the given value."""
  startedAt_lt: String

  """All values less than or equal the given value."""
  startedAt_lte: String

  """All values greater than the given value."""
  startedAt_gt: String

  """All values greater than or equal the given value."""
  startedAt_gte: String

  """All values containing the given string."""
  startedAt_contains: String

  """All values not containing the given string."""
  startedAt_not_contains: String

  """All values starting with the given string."""
  startedAt_starts_with: String

  """All values not starting with the given string."""
  startedAt_not_starts_with: String

  """All values ending with the given string."""
  startedAt_ends_with: String

  """All values not ending with the given string."""
  startedAt_not_ends_with: String
  endAt: String

  """All values that are not equal to given value."""
  endAt_not: String

  """All values that are contained in given list."""
  endAt_in: [String!]

  """All values that are not contained in given list."""
  endAt_not_in: [String!]

  """All values less than the given value."""
  endAt_lt: String

  """All values less than or equal the given value."""
  endAt_lte: String

  """All values greater than the given value."""
  endAt_gt: String

  """All values greater than or equal the given value."""
  endAt_gte: String

  """All values containing the given string."""
  endAt_contains: String

  """All values not containing the given string."""
  endAt_not_contains: String

  """All values starting with the given string."""
  endAt_starts_with: String

  """All values not starting with the given string."""
  endAt_not_starts_with: String

  """All values ending with the given string."""
  endAt_ends_with: String

  """All values not ending with the given string."""
  endAt_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input PeriodWhereUniqueInput {
  id: ID
}

enum PrismaDatabase {
  default
}

type Query {
  admins(where: AdminWhereInput, orderBy: AdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Admin]!
  teachers(where: TeacherWhereInput, orderBy: TeacherOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Teacher]!
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note]!
  notices(where: NoticeWhereInput, orderBy: NoticeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notice]!
  departments(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department]!
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session]!
  students(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Student]!
  semesters(where: SemesterWhereInput, orderBy: SemesterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Semester]!
  bookLists(where: BookListWhereInput, orderBy: BookListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookList]!
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book]!
  routines(where: RoutineWhereInput, orderBy: RoutineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Routine]!
  dayInWeeks(where: DayInWeekWhereInput, orderBy: DayInWeekOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DayInWeek]!
  classes(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Class]!
  attendenceDays(where: AttendenceDayWhereInput, orderBy: AttendenceDayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AttendenceDay]!
  attendenceClasses(where: AttendenceClassWhereInput, orderBy: AttendenceClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AttendenceClass]!
  attendences(where: AttendenceWhereInput, orderBy: AttendenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attendence]!
  periods(where: PeriodWhereInput, orderBy: PeriodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Period]!
  admin(where: AdminWhereUniqueInput!): Admin
  teacher(where: TeacherWhereUniqueInput!): Teacher
  note(where: NoteWhereUniqueInput!): Note
  notice(where: NoticeWhereUniqueInput!): Notice
  department(where: DepartmentWhereUniqueInput!): Department
  session(where: SessionWhereUniqueInput!): Session
  student(where: StudentWhereUniqueInput!): Student
  semester(where: SemesterWhereUniqueInput!): Semester
  bookList(where: BookListWhereUniqueInput!): BookList
  book(where: BookWhereUniqueInput!): Book
  routine(where: RoutineWhereUniqueInput!): Routine
  dayInWeek(where: DayInWeekWhereUniqueInput!): DayInWeek
  class(where: ClassWhereUniqueInput!): Class
  attendenceDay(where: AttendenceDayWhereUniqueInput!): AttendenceDay
  attendenceClass(where: AttendenceClassWhereUniqueInput!): AttendenceClass
  attendence(where: AttendenceWhereUniqueInput!): Attendence
  period(where: PeriodWhereUniqueInput!): Period
  adminsConnection(where: AdminWhereInput, orderBy: AdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AdminConnection!
  teachersConnection(where: TeacherWhereInput, orderBy: TeacherOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeacherConnection!
  notesConnection(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NoteConnection!
  noticesConnection(where: NoticeWhereInput, orderBy: NoticeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NoticeConnection!
  departmentsConnection(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DepartmentConnection!
  sessionsConnection(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionConnection!
  studentsConnection(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StudentConnection!
  semestersConnection(where: SemesterWhereInput, orderBy: SemesterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SemesterConnection!
  bookListsConnection(where: BookListWhereInput, orderBy: BookListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookListConnection!
  booksConnection(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookConnection!
  routinesConnection(where: RoutineWhereInput, orderBy: RoutineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoutineConnection!
  dayInWeeksConnection(where: DayInWeekWhereInput, orderBy: DayInWeekOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DayInWeekConnection!
  classesConnection(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClassConnection!
  attendenceDaysConnection(where: AttendenceDayWhereInput, orderBy: AttendenceDayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AttendenceDayConnection!
  attendenceClassesConnection(where: AttendenceClassWhereInput, orderBy: AttendenceClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AttendenceClassConnection!
  attendencesConnection(where: AttendenceWhereInput, orderBy: AttendenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AttendenceConnection!
  periodsConnection(where: PeriodWhereInput, orderBy: PeriodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PeriodConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Routine implements Node {
  id: ID!
  title: String!
  session: Session!
  semester: Semester!
  department: Department!
  shift: ShiftTypes!
  days(where: DayInWeekWhereInput, orderBy: DayInWeekOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DayInWeek!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type RoutineConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoutineEdge]!
  aggregate: AggregateRoutine!
}

input RoutineCreateInput {
  id: ID
  title: String!
  shift: ShiftTypes!
  session: SessionCreateOneWithoutRoutinesInput!
  semester: SemesterCreateOneWithoutRoutinesInput!
  department: DepartmentCreateOneWithoutRoutinesInput!
  days: DayInWeekCreateManyWithoutRoutineInput
}

input RoutineCreateManyWithoutDepartmentInput {
  create: [RoutineCreateWithoutDepartmentInput!]
  connect: [RoutineWhereUniqueInput!]
}

input RoutineCreateManyWithoutSemesterInput {
  create: [RoutineCreateWithoutSemesterInput!]
  connect: [RoutineWhereUniqueInput!]
}

input RoutineCreateManyWithoutSessionInput {
  create: [RoutineCreateWithoutSessionInput!]
  connect: [RoutineWhereUniqueInput!]
}

input RoutineCreateOneWithoutDaysInput {
  create: RoutineCreateWithoutDaysInput
  connect: RoutineWhereUniqueInput
}

input RoutineCreateWithoutDaysInput {
  id: ID
  title: String!
  shift: ShiftTypes!
  session: SessionCreateOneWithoutRoutinesInput!
  semester: SemesterCreateOneWithoutRoutinesInput!
  department: DepartmentCreateOneWithoutRoutinesInput!
}

input RoutineCreateWithoutDepartmentInput {
  id: ID
  title: String!
  shift: ShiftTypes!
  session: SessionCreateOneWithoutRoutinesInput!
  semester: SemesterCreateOneWithoutRoutinesInput!
  days: DayInWeekCreateManyWithoutRoutineInput
}

input RoutineCreateWithoutSemesterInput {
  id: ID
  title: String!
  shift: ShiftTypes!
  session: SessionCreateOneWithoutRoutinesInput!
  department: DepartmentCreateOneWithoutRoutinesInput!
  days: DayInWeekCreateManyWithoutRoutineInput
}

input RoutineCreateWithoutSessionInput {
  id: ID
  title: String!
  shift: ShiftTypes!
  semester: SemesterCreateOneWithoutRoutinesInput!
  department: DepartmentCreateOneWithoutRoutinesInput!
  days: DayInWeekCreateManyWithoutRoutineInput
}

"""An edge in a connection."""
type RoutineEdge {
  """The item at the end of the edge."""
  node: Routine!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoutineOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  shift_ASC
  shift_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RoutinePreviousValues {
  id: ID!
  title: String!
  shift: ShiftTypes!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RoutineScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RoutineScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoutineScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoutineScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  shift: ShiftTypes

  """All values that are not equal to given value."""
  shift_not: ShiftTypes

  """All values that are contained in given list."""
  shift_in: [ShiftTypes!]

  """All values that are not contained in given list."""
  shift_not_in: [ShiftTypes!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type RoutineSubscriptionPayload {
  mutation: MutationType!
  node: Routine
  updatedFields: [String!]
  previousValues: RoutinePreviousValues
}

input RoutineSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoutineSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoutineSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoutineSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoutineWhereInput
}

input RoutineUpdateInput {
  title: String
  shift: ShiftTypes
  session: SessionUpdateOneRequiredWithoutRoutinesInput
  semester: SemesterUpdateOneRequiredWithoutRoutinesInput
  department: DepartmentUpdateOneRequiredWithoutRoutinesInput
  days: DayInWeekUpdateManyWithoutRoutineInput
}

input RoutineUpdateManyDataInput {
  title: String
  shift: ShiftTypes
}

input RoutineUpdateManyMutationInput {
  title: String
  shift: ShiftTypes
}

input RoutineUpdateManyWithoutDepartmentInput {
  create: [RoutineCreateWithoutDepartmentInput!]
  connect: [RoutineWhereUniqueInput!]
  set: [RoutineWhereUniqueInput!]
  disconnect: [RoutineWhereUniqueInput!]
  delete: [RoutineWhereUniqueInput!]
  update: [RoutineUpdateWithWhereUniqueWithoutDepartmentInput!]
  updateMany: [RoutineUpdateManyWithWhereNestedInput!]
  deleteMany: [RoutineScalarWhereInput!]
  upsert: [RoutineUpsertWithWhereUniqueWithoutDepartmentInput!]
}

input RoutineUpdateManyWithoutSemesterInput {
  create: [RoutineCreateWithoutSemesterInput!]
  connect: [RoutineWhereUniqueInput!]
  set: [RoutineWhereUniqueInput!]
  disconnect: [RoutineWhereUniqueInput!]
  delete: [RoutineWhereUniqueInput!]
  update: [RoutineUpdateWithWhereUniqueWithoutSemesterInput!]
  updateMany: [RoutineUpdateManyWithWhereNestedInput!]
  deleteMany: [RoutineScalarWhereInput!]
  upsert: [RoutineUpsertWithWhereUniqueWithoutSemesterInput!]
}

input RoutineUpdateManyWithoutSessionInput {
  create: [RoutineCreateWithoutSessionInput!]
  connect: [RoutineWhereUniqueInput!]
  set: [RoutineWhereUniqueInput!]
  disconnect: [RoutineWhereUniqueInput!]
  delete: [RoutineWhereUniqueInput!]
  update: [RoutineUpdateWithWhereUniqueWithoutSessionInput!]
  updateMany: [RoutineUpdateManyWithWhereNestedInput!]
  deleteMany: [RoutineScalarWhereInput!]
  upsert: [RoutineUpsertWithWhereUniqueWithoutSessionInput!]
}

input RoutineUpdateManyWithWhereNestedInput {
  where: RoutineScalarWhereInput!
  data: RoutineUpdateManyDataInput!
}

input RoutineUpdateOneRequiredWithoutDaysInput {
  create: RoutineCreateWithoutDaysInput
  connect: RoutineWhereUniqueInput
  update: RoutineUpdateWithoutDaysDataInput
  upsert: RoutineUpsertWithoutDaysInput
}

input RoutineUpdateWithoutDaysDataInput {
  title: String
  shift: ShiftTypes
  session: SessionUpdateOneRequiredWithoutRoutinesInput
  semester: SemesterUpdateOneRequiredWithoutRoutinesInput
  department: DepartmentUpdateOneRequiredWithoutRoutinesInput
}

input RoutineUpdateWithoutDepartmentDataInput {
  title: String
  shift: ShiftTypes
  session: SessionUpdateOneRequiredWithoutRoutinesInput
  semester: SemesterUpdateOneRequiredWithoutRoutinesInput
  days: DayInWeekUpdateManyWithoutRoutineInput
}

input RoutineUpdateWithoutSemesterDataInput {
  title: String
  shift: ShiftTypes
  session: SessionUpdateOneRequiredWithoutRoutinesInput
  department: DepartmentUpdateOneRequiredWithoutRoutinesInput
  days: DayInWeekUpdateManyWithoutRoutineInput
}

input RoutineUpdateWithoutSessionDataInput {
  title: String
  shift: ShiftTypes
  semester: SemesterUpdateOneRequiredWithoutRoutinesInput
  department: DepartmentUpdateOneRequiredWithoutRoutinesInput
  days: DayInWeekUpdateManyWithoutRoutineInput
}

input RoutineUpdateWithWhereUniqueWithoutDepartmentInput {
  where: RoutineWhereUniqueInput!
  data: RoutineUpdateWithoutDepartmentDataInput!
}

input RoutineUpdateWithWhereUniqueWithoutSemesterInput {
  where: RoutineWhereUniqueInput!
  data: RoutineUpdateWithoutSemesterDataInput!
}

input RoutineUpdateWithWhereUniqueWithoutSessionInput {
  where: RoutineWhereUniqueInput!
  data: RoutineUpdateWithoutSessionDataInput!
}

input RoutineUpsertWithoutDaysInput {
  update: RoutineUpdateWithoutDaysDataInput!
  create: RoutineCreateWithoutDaysInput!
}

input RoutineUpsertWithWhereUniqueWithoutDepartmentInput {
  where: RoutineWhereUniqueInput!
  update: RoutineUpdateWithoutDepartmentDataInput!
  create: RoutineCreateWithoutDepartmentInput!
}

input RoutineUpsertWithWhereUniqueWithoutSemesterInput {
  where: RoutineWhereUniqueInput!
  update: RoutineUpdateWithoutSemesterDataInput!
  create: RoutineCreateWithoutSemesterInput!
}

input RoutineUpsertWithWhereUniqueWithoutSessionInput {
  where: RoutineWhereUniqueInput!
  update: RoutineUpdateWithoutSessionDataInput!
  create: RoutineCreateWithoutSessionInput!
}

input RoutineWhereInput {
  """Logical AND on all given filters."""
  AND: [RoutineWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoutineWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoutineWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  shift: ShiftTypes

  """All values that are not equal to given value."""
  shift_not: ShiftTypes

  """All values that are contained in given list."""
  shift_in: [ShiftTypes!]

  """All values that are not contained in given list."""
  shift_not_in: [ShiftTypes!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  session: SessionWhereInput
  semester: SemesterWhereInput
  department: DepartmentWhereInput
  days_every: DayInWeekWhereInput
  days_some: DayInWeekWhereInput
  days_none: DayInWeekWhereInput
}

input RoutineWhereUniqueInput {
  id: ID
}

type Semester implements Node {
  id: ID!
  name: SemesterTypes!
  students(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Student!]
  routines(where: RoutineWhereInput, orderBy: RoutineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Routine!]
  classes(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Class!]
  bookLists(where: BookListWhereInput, orderBy: BookListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookList!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SemesterConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SemesterEdge]!
  aggregate: AggregateSemester!
}

input SemesterCreateInput {
  id: ID
  name: SemesterTypes!
  students: StudentCreateManyWithoutSemesterInput
  routines: RoutineCreateManyWithoutSemesterInput
  classes: ClassCreateManyWithoutSemesterInput
  bookLists: BookListCreateManyWithoutSemesterInput
}

input SemesterCreateOneWithoutBookListsInput {
  create: SemesterCreateWithoutBookListsInput
  connect: SemesterWhereUniqueInput
}

input SemesterCreateOneWithoutClassesInput {
  create: SemesterCreateWithoutClassesInput
  connect: SemesterWhereUniqueInput
}

input SemesterCreateOneWithoutRoutinesInput {
  create: SemesterCreateWithoutRoutinesInput
  connect: SemesterWhereUniqueInput
}

input SemesterCreateOneWithoutStudentsInput {
  create: SemesterCreateWithoutStudentsInput
  connect: SemesterWhereUniqueInput
}

input SemesterCreateWithoutBookListsInput {
  id: ID
  name: SemesterTypes!
  students: StudentCreateManyWithoutSemesterInput
  routines: RoutineCreateManyWithoutSemesterInput
  classes: ClassCreateManyWithoutSemesterInput
}

input SemesterCreateWithoutClassesInput {
  id: ID
  name: SemesterTypes!
  students: StudentCreateManyWithoutSemesterInput
  routines: RoutineCreateManyWithoutSemesterInput
  bookLists: BookListCreateManyWithoutSemesterInput
}

input SemesterCreateWithoutRoutinesInput {
  id: ID
  name: SemesterTypes!
  students: StudentCreateManyWithoutSemesterInput
  classes: ClassCreateManyWithoutSemesterInput
  bookLists: BookListCreateManyWithoutSemesterInput
}

input SemesterCreateWithoutStudentsInput {
  id: ID
  name: SemesterTypes!
  routines: RoutineCreateManyWithoutSemesterInput
  classes: ClassCreateManyWithoutSemesterInput
  bookLists: BookListCreateManyWithoutSemesterInput
}

"""An edge in a connection."""
type SemesterEdge {
  """The item at the end of the edge."""
  node: Semester!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SemesterOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SemesterPreviousValues {
  id: ID!
  name: SemesterTypes!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SemesterSubscriptionPayload {
  mutation: MutationType!
  node: Semester
  updatedFields: [String!]
  previousValues: SemesterPreviousValues
}

input SemesterSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SemesterSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SemesterSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SemesterSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SemesterWhereInput
}

enum SemesterTypes {
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
  SIXTH
  SEVENTH
  EIGHT
}

input SemesterUpdateInput {
  name: SemesterTypes
  students: StudentUpdateManyWithoutSemesterInput
  routines: RoutineUpdateManyWithoutSemesterInput
  classes: ClassUpdateManyWithoutSemesterInput
  bookLists: BookListUpdateManyWithoutSemesterInput
}

input SemesterUpdateManyMutationInput {
  name: SemesterTypes
}

input SemesterUpdateOneRequiredWithoutBookListsInput {
  create: SemesterCreateWithoutBookListsInput
  connect: SemesterWhereUniqueInput
  update: SemesterUpdateWithoutBookListsDataInput
  upsert: SemesterUpsertWithoutBookListsInput
}

input SemesterUpdateOneRequiredWithoutClassesInput {
  create: SemesterCreateWithoutClassesInput
  connect: SemesterWhereUniqueInput
  update: SemesterUpdateWithoutClassesDataInput
  upsert: SemesterUpsertWithoutClassesInput
}

input SemesterUpdateOneRequiredWithoutRoutinesInput {
  create: SemesterCreateWithoutRoutinesInput
  connect: SemesterWhereUniqueInput
  update: SemesterUpdateWithoutRoutinesDataInput
  upsert: SemesterUpsertWithoutRoutinesInput
}

input SemesterUpdateOneRequiredWithoutStudentsInput {
  create: SemesterCreateWithoutStudentsInput
  connect: SemesterWhereUniqueInput
  update: SemesterUpdateWithoutStudentsDataInput
  upsert: SemesterUpsertWithoutStudentsInput
}

input SemesterUpdateWithoutBookListsDataInput {
  name: SemesterTypes
  students: StudentUpdateManyWithoutSemesterInput
  routines: RoutineUpdateManyWithoutSemesterInput
  classes: ClassUpdateManyWithoutSemesterInput
}

input SemesterUpdateWithoutClassesDataInput {
  name: SemesterTypes
  students: StudentUpdateManyWithoutSemesterInput
  routines: RoutineUpdateManyWithoutSemesterInput
  bookLists: BookListUpdateManyWithoutSemesterInput
}

input SemesterUpdateWithoutRoutinesDataInput {
  name: SemesterTypes
  students: StudentUpdateManyWithoutSemesterInput
  classes: ClassUpdateManyWithoutSemesterInput
  bookLists: BookListUpdateManyWithoutSemesterInput
}

input SemesterUpdateWithoutStudentsDataInput {
  name: SemesterTypes
  routines: RoutineUpdateManyWithoutSemesterInput
  classes: ClassUpdateManyWithoutSemesterInput
  bookLists: BookListUpdateManyWithoutSemesterInput
}

input SemesterUpsertWithoutBookListsInput {
  update: SemesterUpdateWithoutBookListsDataInput!
  create: SemesterCreateWithoutBookListsInput!
}

input SemesterUpsertWithoutClassesInput {
  update: SemesterUpdateWithoutClassesDataInput!
  create: SemesterCreateWithoutClassesInput!
}

input SemesterUpsertWithoutRoutinesInput {
  update: SemesterUpdateWithoutRoutinesDataInput!
  create: SemesterCreateWithoutRoutinesInput!
}

input SemesterUpsertWithoutStudentsInput {
  update: SemesterUpdateWithoutStudentsDataInput!
  create: SemesterCreateWithoutStudentsInput!
}

input SemesterWhereInput {
  """Logical AND on all given filters."""
  AND: [SemesterWhereInput!]

  """Logical OR on all given filters."""
  OR: [SemesterWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SemesterWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: SemesterTypes

  """All values that are not equal to given value."""
  name_not: SemesterTypes

  """All values that are contained in given list."""
  name_in: [SemesterTypes!]

  """All values that are not contained in given list."""
  name_not_in: [SemesterTypes!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  students_every: StudentWhereInput
  students_some: StudentWhereInput
  students_none: StudentWhereInput
  routines_every: RoutineWhereInput
  routines_some: RoutineWhereInput
  routines_none: RoutineWhereInput
  classes_every: ClassWhereInput
  classes_some: ClassWhereInput
  classes_none: ClassWhereInput
  bookLists_every: BookListWhereInput
  bookLists_some: BookListWhereInput
  bookLists_none: BookListWhereInput
}

input SemesterWhereUniqueInput {
  id: ID
  name: SemesterTypes
}

type Session implements Node {
  id: ID!
  year: String!
  students(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Student!]
  routines(where: RoutineWhereInput, orderBy: RoutineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Routine!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SessionEdge]!
  aggregate: AggregateSession!
}

input SessionCreateInput {
  id: ID
  year: String!
  students: StudentCreateManyWithoutSessionInput
  routines: RoutineCreateManyWithoutSessionInput
}

input SessionCreateOneWithoutRoutinesInput {
  create: SessionCreateWithoutRoutinesInput
  connect: SessionWhereUniqueInput
}

input SessionCreateOneWithoutStudentsInput {
  create: SessionCreateWithoutStudentsInput
  connect: SessionWhereUniqueInput
}

input SessionCreateWithoutRoutinesInput {
  id: ID
  year: String!
  students: StudentCreateManyWithoutSessionInput
}

input SessionCreateWithoutStudentsInput {
  id: ID
  year: String!
  routines: RoutineCreateManyWithoutSessionInput
}

"""An edge in a connection."""
type SessionEdge {
  """The item at the end of the edge."""
  node: Session!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SessionOrderByInput {
  id_ASC
  id_DESC
  year_ASC
  year_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SessionPreviousValues {
  id: ID!
  year: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SessionSubscriptionPayload {
  mutation: MutationType!
  node: Session
  updatedFields: [String!]
  previousValues: SessionPreviousValues
}

input SessionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SessionWhereInput
}

input SessionUpdateInput {
  year: String
  students: StudentUpdateManyWithoutSessionInput
  routines: RoutineUpdateManyWithoutSessionInput
}

input SessionUpdateManyMutationInput {
  year: String
}

input SessionUpdateOneRequiredWithoutRoutinesInput {
  create: SessionCreateWithoutRoutinesInput
  connect: SessionWhereUniqueInput
  update: SessionUpdateWithoutRoutinesDataInput
  upsert: SessionUpsertWithoutRoutinesInput
}

input SessionUpdateOneRequiredWithoutStudentsInput {
  create: SessionCreateWithoutStudentsInput
  connect: SessionWhereUniqueInput
  update: SessionUpdateWithoutStudentsDataInput
  upsert: SessionUpsertWithoutStudentsInput
}

input SessionUpdateWithoutRoutinesDataInput {
  year: String
  students: StudentUpdateManyWithoutSessionInput
}

input SessionUpdateWithoutStudentsDataInput {
  year: String
  routines: RoutineUpdateManyWithoutSessionInput
}

input SessionUpsertWithoutRoutinesInput {
  update: SessionUpdateWithoutRoutinesDataInput!
  create: SessionCreateWithoutRoutinesInput!
}

input SessionUpsertWithoutStudentsInput {
  update: SessionUpdateWithoutStudentsDataInput!
  create: SessionCreateWithoutStudentsInput!
}

input SessionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  year: String

  """All values that are not equal to given value."""
  year_not: String

  """All values that are contained in given list."""
  year_in: [String!]

  """All values that are not contained in given list."""
  year_not_in: [String!]

  """All values less than the given value."""
  year_lt: String

  """All values less than or equal the given value."""
  year_lte: String

  """All values greater than the given value."""
  year_gt: String

  """All values greater than or equal the given value."""
  year_gte: String

  """All values containing the given string."""
  year_contains: String

  """All values not containing the given string."""
  year_not_contains: String

  """All values starting with the given string."""
  year_starts_with: String

  """All values not starting with the given string."""
  year_not_starts_with: String

  """All values ending with the given string."""
  year_ends_with: String

  """All values not ending with the given string."""
  year_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  students_every: StudentWhereInput
  students_some: StudentWhereInput
  students_none: StudentWhereInput
  routines_every: RoutineWhereInput
  routines_some: RoutineWhereInput
  routines_none: RoutineWhereInput
}

input SessionWhereUniqueInput {
  id: ID
  year: String
}

enum ShiftTypes {
  MORNING
  DAY
}

type Student implements Node {
  id: ID!
  name: String!
  email: String!
  roll: String!
  reg: String!
  address: String!
  session: Session!
  phone: String!
  shift: ShiftTypes!
  department: Department!
  semester: Semester!
  password: String!
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note!]
  attendences(where: AttendenceWhereInput, orderBy: AttendenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attendence!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type StudentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StudentEdge]!
  aggregate: AggregateStudent!
}

input StudentCreateInput {
  id: ID
  name: String!
  email: String!
  roll: String!
  reg: String!
  address: String!
  phone: String!
  shift: ShiftTypes!
  password: String!
  session: SessionCreateOneWithoutStudentsInput!
  department: DepartmentCreateOneWithoutStudentsInput!
  semester: SemesterCreateOneWithoutStudentsInput!
  notes: NoteCreateManyWithoutAuthorInput
  attendences: AttendenceCreateManyWithoutStudentInput
}

input StudentCreateManyWithoutDepartmentInput {
  create: [StudentCreateWithoutDepartmentInput!]
  connect: [StudentWhereUniqueInput!]
}

input StudentCreateManyWithoutSemesterInput {
  create: [StudentCreateWithoutSemesterInput!]
  connect: [StudentWhereUniqueInput!]
}

input StudentCreateManyWithoutSessionInput {
  create: [StudentCreateWithoutSessionInput!]
  connect: [StudentWhereUniqueInput!]
}

input StudentCreateOneWithoutAttendencesInput {
  create: StudentCreateWithoutAttendencesInput
  connect: StudentWhereUniqueInput
}

input StudentCreateOneWithoutNotesInput {
  create: StudentCreateWithoutNotesInput
  connect: StudentWhereUniqueInput
}

input StudentCreateWithoutAttendencesInput {
  id: ID
  name: String!
  email: String!
  roll: String!
  reg: String!
  address: String!
  phone: String!
  shift: ShiftTypes!
  password: String!
  session: SessionCreateOneWithoutStudentsInput!
  department: DepartmentCreateOneWithoutStudentsInput!
  semester: SemesterCreateOneWithoutStudentsInput!
  notes: NoteCreateManyWithoutAuthorInput
}

input StudentCreateWithoutDepartmentInput {
  id: ID
  name: String!
  email: String!
  roll: String!
  reg: String!
  address: String!
  phone: String!
  shift: ShiftTypes!
  password: String!
  session: SessionCreateOneWithoutStudentsInput!
  semester: SemesterCreateOneWithoutStudentsInput!
  notes: NoteCreateManyWithoutAuthorInput
  attendences: AttendenceCreateManyWithoutStudentInput
}

input StudentCreateWithoutNotesInput {
  id: ID
  name: String!
  email: String!
  roll: String!
  reg: String!
  address: String!
  phone: String!
  shift: ShiftTypes!
  password: String!
  session: SessionCreateOneWithoutStudentsInput!
  department: DepartmentCreateOneWithoutStudentsInput!
  semester: SemesterCreateOneWithoutStudentsInput!
  attendences: AttendenceCreateManyWithoutStudentInput
}

input StudentCreateWithoutSemesterInput {
  id: ID
  name: String!
  email: String!
  roll: String!
  reg: String!
  address: String!
  phone: String!
  shift: ShiftTypes!
  password: String!
  session: SessionCreateOneWithoutStudentsInput!
  department: DepartmentCreateOneWithoutStudentsInput!
  notes: NoteCreateManyWithoutAuthorInput
  attendences: AttendenceCreateManyWithoutStudentInput
}

input StudentCreateWithoutSessionInput {
  id: ID
  name: String!
  email: String!
  roll: String!
  reg: String!
  address: String!
  phone: String!
  shift: ShiftTypes!
  password: String!
  department: DepartmentCreateOneWithoutStudentsInput!
  semester: SemesterCreateOneWithoutStudentsInput!
  notes: NoteCreateManyWithoutAuthorInput
  attendences: AttendenceCreateManyWithoutStudentInput
}

"""An edge in a connection."""
type StudentEdge {
  """The item at the end of the edge."""
  node: Student!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StudentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  roll_ASC
  roll_DESC
  reg_ASC
  reg_DESC
  address_ASC
  address_DESC
  phone_ASC
  phone_DESC
  shift_ASC
  shift_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StudentPreviousValues {
  id: ID!
  name: String!
  email: String!
  roll: String!
  reg: String!
  address: String!
  phone: String!
  shift: ShiftTypes!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input StudentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StudentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StudentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StudentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  roll: String

  """All values that are not equal to given value."""
  roll_not: String

  """All values that are contained in given list."""
  roll_in: [String!]

  """All values that are not contained in given list."""
  roll_not_in: [String!]

  """All values less than the given value."""
  roll_lt: String

  """All values less than or equal the given value."""
  roll_lte: String

  """All values greater than the given value."""
  roll_gt: String

  """All values greater than or equal the given value."""
  roll_gte: String

  """All values containing the given string."""
  roll_contains: String

  """All values not containing the given string."""
  roll_not_contains: String

  """All values starting with the given string."""
  roll_starts_with: String

  """All values not starting with the given string."""
  roll_not_starts_with: String

  """All values ending with the given string."""
  roll_ends_with: String

  """All values not ending with the given string."""
  roll_not_ends_with: String
  reg: String

  """All values that are not equal to given value."""
  reg_not: String

  """All values that are contained in given list."""
  reg_in: [String!]

  """All values that are not contained in given list."""
  reg_not_in: [String!]

  """All values less than the given value."""
  reg_lt: String

  """All values less than or equal the given value."""
  reg_lte: String

  """All values greater than the given value."""
  reg_gt: String

  """All values greater than or equal the given value."""
  reg_gte: String

  """All values containing the given string."""
  reg_contains: String

  """All values not containing the given string."""
  reg_not_contains: String

  """All values starting with the given string."""
  reg_starts_with: String

  """All values not starting with the given string."""
  reg_not_starts_with: String

  """All values ending with the given string."""
  reg_ends_with: String

  """All values not ending with the given string."""
  reg_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  shift: ShiftTypes

  """All values that are not equal to given value."""
  shift_not: ShiftTypes

  """All values that are contained in given list."""
  shift_in: [ShiftTypes!]

  """All values that are not contained in given list."""
  shift_not_in: [ShiftTypes!]
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type StudentSubscriptionPayload {
  mutation: MutationType!
  node: Student
  updatedFields: [String!]
  previousValues: StudentPreviousValues
}

input StudentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StudentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StudentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StudentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StudentWhereInput
}

input StudentUpdateInput {
  name: String
  email: String
  roll: String
  reg: String
  address: String
  phone: String
  shift: ShiftTypes
  password: String
  session: SessionUpdateOneRequiredWithoutStudentsInput
  department: DepartmentUpdateOneRequiredWithoutStudentsInput
  semester: SemesterUpdateOneRequiredWithoutStudentsInput
  notes: NoteUpdateManyWithoutAuthorInput
  attendences: AttendenceUpdateManyWithoutStudentInput
}

input StudentUpdateManyDataInput {
  name: String
  email: String
  roll: String
  reg: String
  address: String
  phone: String
  shift: ShiftTypes
  password: String
}

input StudentUpdateManyMutationInput {
  name: String
  email: String
  roll: String
  reg: String
  address: String
  phone: String
  shift: ShiftTypes
  password: String
}

input StudentUpdateManyWithoutDepartmentInput {
  create: [StudentCreateWithoutDepartmentInput!]
  connect: [StudentWhereUniqueInput!]
  set: [StudentWhereUniqueInput!]
  disconnect: [StudentWhereUniqueInput!]
  delete: [StudentWhereUniqueInput!]
  update: [StudentUpdateWithWhereUniqueWithoutDepartmentInput!]
  updateMany: [StudentUpdateManyWithWhereNestedInput!]
  deleteMany: [StudentScalarWhereInput!]
  upsert: [StudentUpsertWithWhereUniqueWithoutDepartmentInput!]
}

input StudentUpdateManyWithoutSemesterInput {
  create: [StudentCreateWithoutSemesterInput!]
  connect: [StudentWhereUniqueInput!]
  set: [StudentWhereUniqueInput!]
  disconnect: [StudentWhereUniqueInput!]
  delete: [StudentWhereUniqueInput!]
  update: [StudentUpdateWithWhereUniqueWithoutSemesterInput!]
  updateMany: [StudentUpdateManyWithWhereNestedInput!]
  deleteMany: [StudentScalarWhereInput!]
  upsert: [StudentUpsertWithWhereUniqueWithoutSemesterInput!]
}

input StudentUpdateManyWithoutSessionInput {
  create: [StudentCreateWithoutSessionInput!]
  connect: [StudentWhereUniqueInput!]
  set: [StudentWhereUniqueInput!]
  disconnect: [StudentWhereUniqueInput!]
  delete: [StudentWhereUniqueInput!]
  update: [StudentUpdateWithWhereUniqueWithoutSessionInput!]
  updateMany: [StudentUpdateManyWithWhereNestedInput!]
  deleteMany: [StudentScalarWhereInput!]
  upsert: [StudentUpsertWithWhereUniqueWithoutSessionInput!]
}

input StudentUpdateManyWithWhereNestedInput {
  where: StudentScalarWhereInput!
  data: StudentUpdateManyDataInput!
}

input StudentUpdateOneRequiredWithoutAttendencesInput {
  create: StudentCreateWithoutAttendencesInput
  connect: StudentWhereUniqueInput
  update: StudentUpdateWithoutAttendencesDataInput
  upsert: StudentUpsertWithoutAttendencesInput
}

input StudentUpdateOneRequiredWithoutNotesInput {
  create: StudentCreateWithoutNotesInput
  connect: StudentWhereUniqueInput
  update: StudentUpdateWithoutNotesDataInput
  upsert: StudentUpsertWithoutNotesInput
}

input StudentUpdateWithoutAttendencesDataInput {
  name: String
  email: String
  roll: String
  reg: String
  address: String
  phone: String
  shift: ShiftTypes
  password: String
  session: SessionUpdateOneRequiredWithoutStudentsInput
  department: DepartmentUpdateOneRequiredWithoutStudentsInput
  semester: SemesterUpdateOneRequiredWithoutStudentsInput
  notes: NoteUpdateManyWithoutAuthorInput
}

input StudentUpdateWithoutDepartmentDataInput {
  name: String
  email: String
  roll: String
  reg: String
  address: String
  phone: String
  shift: ShiftTypes
  password: String
  session: SessionUpdateOneRequiredWithoutStudentsInput
  semester: SemesterUpdateOneRequiredWithoutStudentsInput
  notes: NoteUpdateManyWithoutAuthorInput
  attendences: AttendenceUpdateManyWithoutStudentInput
}

input StudentUpdateWithoutNotesDataInput {
  name: String
  email: String
  roll: String
  reg: String
  address: String
  phone: String
  shift: ShiftTypes
  password: String
  session: SessionUpdateOneRequiredWithoutStudentsInput
  department: DepartmentUpdateOneRequiredWithoutStudentsInput
  semester: SemesterUpdateOneRequiredWithoutStudentsInput
  attendences: AttendenceUpdateManyWithoutStudentInput
}

input StudentUpdateWithoutSemesterDataInput {
  name: String
  email: String
  roll: String
  reg: String
  address: String
  phone: String
  shift: ShiftTypes
  password: String
  session: SessionUpdateOneRequiredWithoutStudentsInput
  department: DepartmentUpdateOneRequiredWithoutStudentsInput
  notes: NoteUpdateManyWithoutAuthorInput
  attendences: AttendenceUpdateManyWithoutStudentInput
}

input StudentUpdateWithoutSessionDataInput {
  name: String
  email: String
  roll: String
  reg: String
  address: String
  phone: String
  shift: ShiftTypes
  password: String
  department: DepartmentUpdateOneRequiredWithoutStudentsInput
  semester: SemesterUpdateOneRequiredWithoutStudentsInput
  notes: NoteUpdateManyWithoutAuthorInput
  attendences: AttendenceUpdateManyWithoutStudentInput
}

input StudentUpdateWithWhereUniqueWithoutDepartmentInput {
  where: StudentWhereUniqueInput!
  data: StudentUpdateWithoutDepartmentDataInput!
}

input StudentUpdateWithWhereUniqueWithoutSemesterInput {
  where: StudentWhereUniqueInput!
  data: StudentUpdateWithoutSemesterDataInput!
}

input StudentUpdateWithWhereUniqueWithoutSessionInput {
  where: StudentWhereUniqueInput!
  data: StudentUpdateWithoutSessionDataInput!
}

input StudentUpsertWithoutAttendencesInput {
  update: StudentUpdateWithoutAttendencesDataInput!
  create: StudentCreateWithoutAttendencesInput!
}

input StudentUpsertWithoutNotesInput {
  update: StudentUpdateWithoutNotesDataInput!
  create: StudentCreateWithoutNotesInput!
}

input StudentUpsertWithWhereUniqueWithoutDepartmentInput {
  where: StudentWhereUniqueInput!
  update: StudentUpdateWithoutDepartmentDataInput!
  create: StudentCreateWithoutDepartmentInput!
}

input StudentUpsertWithWhereUniqueWithoutSemesterInput {
  where: StudentWhereUniqueInput!
  update: StudentUpdateWithoutSemesterDataInput!
  create: StudentCreateWithoutSemesterInput!
}

input StudentUpsertWithWhereUniqueWithoutSessionInput {
  where: StudentWhereUniqueInput!
  update: StudentUpdateWithoutSessionDataInput!
  create: StudentCreateWithoutSessionInput!
}

input StudentWhereInput {
  """Logical AND on all given filters."""
  AND: [StudentWhereInput!]

  """Logical OR on all given filters."""
  OR: [StudentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StudentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  roll: String

  """All values that are not equal to given value."""
  roll_not: String

  """All values that are contained in given list."""
  roll_in: [String!]

  """All values that are not contained in given list."""
  roll_not_in: [String!]

  """All values less than the given value."""
  roll_lt: String

  """All values less than or equal the given value."""
  roll_lte: String

  """All values greater than the given value."""
  roll_gt: String

  """All values greater than or equal the given value."""
  roll_gte: String

  """All values containing the given string."""
  roll_contains: String

  """All values not containing the given string."""
  roll_not_contains: String

  """All values starting with the given string."""
  roll_starts_with: String

  """All values not starting with the given string."""
  roll_not_starts_with: String

  """All values ending with the given string."""
  roll_ends_with: String

  """All values not ending with the given string."""
  roll_not_ends_with: String
  reg: String

  """All values that are not equal to given value."""
  reg_not: String

  """All values that are contained in given list."""
  reg_in: [String!]

  """All values that are not contained in given list."""
  reg_not_in: [String!]

  """All values less than the given value."""
  reg_lt: String

  """All values less than or equal the given value."""
  reg_lte: String

  """All values greater than the given value."""
  reg_gt: String

  """All values greater than or equal the given value."""
  reg_gte: String

  """All values containing the given string."""
  reg_contains: String

  """All values not containing the given string."""
  reg_not_contains: String

  """All values starting with the given string."""
  reg_starts_with: String

  """All values not starting with the given string."""
  reg_not_starts_with: String

  """All values ending with the given string."""
  reg_ends_with: String

  """All values not ending with the given string."""
  reg_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  shift: ShiftTypes

  """All values that are not equal to given value."""
  shift_not: ShiftTypes

  """All values that are contained in given list."""
  shift_in: [ShiftTypes!]

  """All values that are not contained in given list."""
  shift_not_in: [ShiftTypes!]
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  session: SessionWhereInput
  department: DepartmentWhereInput
  semester: SemesterWhereInput
  notes_every: NoteWhereInput
  notes_some: NoteWhereInput
  notes_none: NoteWhereInput
  attendences_every: AttendenceWhereInput
  attendences_some: AttendenceWhereInput
  attendences_none: AttendenceWhereInput
}

input StudentWhereUniqueInput {
  id: ID
  email: String
  roll: String
  reg: String
}

type Subscription {
  admin(where: AdminSubscriptionWhereInput): AdminSubscriptionPayload
  teacher(where: TeacherSubscriptionWhereInput): TeacherSubscriptionPayload
  note(where: NoteSubscriptionWhereInput): NoteSubscriptionPayload
  notice(where: NoticeSubscriptionWhereInput): NoticeSubscriptionPayload
  department(where: DepartmentSubscriptionWhereInput): DepartmentSubscriptionPayload
  session(where: SessionSubscriptionWhereInput): SessionSubscriptionPayload
  student(where: StudentSubscriptionWhereInput): StudentSubscriptionPayload
  semester(where: SemesterSubscriptionWhereInput): SemesterSubscriptionPayload
  bookList(where: BookListSubscriptionWhereInput): BookListSubscriptionPayload
  book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
  routine(where: RoutineSubscriptionWhereInput): RoutineSubscriptionPayload
  dayInWeek(where: DayInWeekSubscriptionWhereInput): DayInWeekSubscriptionPayload
  class(where: ClassSubscriptionWhereInput): ClassSubscriptionPayload
  attendenceDay(where: AttendenceDaySubscriptionWhereInput): AttendenceDaySubscriptionPayload
  attendenceClass(where: AttendenceClassSubscriptionWhereInput): AttendenceClassSubscriptionPayload
  attendence(where: AttendenceSubscriptionWhereInput): AttendenceSubscriptionPayload
  period(where: PeriodSubscriptionWhereInput): PeriodSubscriptionPayload
}

type Teacher implements Node {
  id: ID!
  name: String!
  email: String!
  address: String!
  position: String!
  phone: String!
  password: String!
  classes(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Class!]
}

"""A connection to a list of items."""
type TeacherConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeacherEdge]!
  aggregate: AggregateTeacher!
}

input TeacherCreateInput {
  id: ID
  name: String!
  email: String!
  address: String!
  position: String!
  phone: String!
  password: String!
  classes: ClassCreateManyWithoutMentorInput
}

input TeacherCreateOneWithoutClassesInput {
  create: TeacherCreateWithoutClassesInput
  connect: TeacherWhereUniqueInput
}

input TeacherCreateWithoutClassesInput {
  id: ID
  name: String!
  email: String!
  address: String!
  position: String!
  phone: String!
  password: String!
}

"""An edge in a connection."""
type TeacherEdge {
  """The item at the end of the edge."""
  node: Teacher!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TeacherOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  address_ASC
  address_DESC
  position_ASC
  position_DESC
  phone_ASC
  phone_DESC
  password_ASC
  password_DESC
}

type TeacherPreviousValues {
  id: ID!
  name: String!
  email: String!
  address: String!
  position: String!
  phone: String!
  password: String!
}

type TeacherSubscriptionPayload {
  mutation: MutationType!
  node: Teacher
  updatedFields: [String!]
  previousValues: TeacherPreviousValues
}

input TeacherSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TeacherSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeacherSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeacherSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeacherWhereInput
}

input TeacherUpdateInput {
  name: String
  email: String
  address: String
  position: String
  phone: String
  password: String
  classes: ClassUpdateManyWithoutMentorInput
}

input TeacherUpdateManyMutationInput {
  name: String
  email: String
  address: String
  position: String
  phone: String
  password: String
}

input TeacherUpdateOneRequiredWithoutClassesInput {
  create: TeacherCreateWithoutClassesInput
  connect: TeacherWhereUniqueInput
  update: TeacherUpdateWithoutClassesDataInput
  upsert: TeacherUpsertWithoutClassesInput
}

input TeacherUpdateWithoutClassesDataInput {
  name: String
  email: String
  address: String
  position: String
  phone: String
  password: String
}

input TeacherUpsertWithoutClassesInput {
  update: TeacherUpdateWithoutClassesDataInput!
  create: TeacherCreateWithoutClassesInput!
}

input TeacherWhereInput {
  """Logical AND on all given filters."""
  AND: [TeacherWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeacherWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeacherWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  position: String

  """All values that are not equal to given value."""
  position_not: String

  """All values that are contained in given list."""
  position_in: [String!]

  """All values that are not contained in given list."""
  position_not_in: [String!]

  """All values less than the given value."""
  position_lt: String

  """All values less than or equal the given value."""
  position_lte: String

  """All values greater than the given value."""
  position_gt: String

  """All values greater than or equal the given value."""
  position_gte: String

  """All values containing the given string."""
  position_contains: String

  """All values not containing the given string."""
  position_not_contains: String

  """All values starting with the given string."""
  position_starts_with: String

  """All values not starting with the given string."""
  position_not_starts_with: String

  """All values ending with the given string."""
  position_ends_with: String

  """All values not ending with the given string."""
  position_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  classes_every: ClassWhereInput
  classes_some: ClassWhereInput
  classes_none: ClassWhereInput
}

input TeacherWhereUniqueInput {
  id: ID
  email: String
}
