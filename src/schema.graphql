#import CreateInputAdmin, CreateInputDepartment, CreateInputTeacher, CreateInputStudent, CreateInputSession, CreateInputSemester, CreateInputBookList, CreateInputRoutine, CreateInputBook, CreateInputClass, CreateInputPeriod, CreateInputDayInWeek,UpdateInputAdmin,UpdateInputDepartment,UpdateInputTeacher,UpdateInputStudent,UpdateInputSession,UpdateInputSemester,UpdateInputBookList,UpdateInputRoutine,UpdateInputBook,UpdateInputClass,UpdateInputPeriod,UpdateInputDayInWeek from './createInputs.graphql'


type Query{
  admins: [Admin!]!
  admin: Admin!
  students: [Student!]!
  student(id: ID!): Student!
  semesters: [Semester!]!
  semester(id: ID!): Semester!
  sessions: [Session!]!
  session(id: ID!): Session!
  books: [Book!]!
  book(id: ID!): Book!
  teachers: [Teacher!]!
  teacher(id: ID!): Teacher!
  routines: [Routine!]!
  routine(id: ID!): Routine!
  dayInWeeks: [DayInWeek!]!
  dayInWeek(id: ID!): DayInWeek!
  classes: [Class!]!
  class(id: ID!): Class!
  departments:[Department!]!
  department(id: ID!): Department!
  bookLists: [BookList!]!
  bookList(id: ID!): BookList!
  periods: [Period!]!
  period(id: ID!): Period!
}

type Mutation{
  createAdmin(data: CreateInputAdmin): AdminAuthPayload!
  loginAdmin(data: LoginInputAdmin): AdminAuthPayload!
  createDepartment(data: CreateInputDepartment): Department!
  createTeacher(data: CreateInputTeacher): TeacherAuthPayload!
  loginTeacher(data: LoginInputTeacher): TeacherAuthPayload!
  createStudent(data: CreateInputStudent): StudentAuthPayload!
  loginStudent(data: LoginInputStudent): StudentAuthPayload!
  createSession(data: CreateInputSession): Session!
  createSemester(data: CreateInputSemester): Semester!
  createBookList(data: CreateInputBookList): BookList!
  createRoutine(data: CreateInputRoutine): Routine!
  createDayInWeek(data: CreateInputDayInWeek): DayInWeek!
  createBook(data: CreateInputBook): Book!
  createClass(data: CreateInputClass): Class!
  createPeriod(data: CreateInputPeriod): Period!

  updateAdmin(data: UpdateInputAdmin): Admin!
  updateDepartment(id: ID!,data: UpdateInputDepartment): Department!
  updateTeacher(data: UpdateInputTeacher): Teacher!
  updateStudent(data: UpdateInputStudent): Student!
  updateSession(id: ID!,data: UpdateInputSession): Session!
  updateaSemester(id: ID!,data: UpdateInputSemester): Semester!
  updateBookList(id: ID!,data: UpdateInputBookList): BookList!
  updateRoutine(id: ID!,data: UpdateInputRoutine): Routine!
  updateDayInWeek(id: ID!,data: UpdateInputDayInWeek): DayInWeek!
  updateBook(id: ID!,data: UpdateInputBook): Book!
  updateClass(id: ID!,data: UpdateInputClass): Class!
  updatePeriod(id: ID!,data: UpdateInputPeriod): Period!

  deleteAdmin: Admin!
  deleteDepartment(id: ID!): Department!
  deleteTeacher: Teacher!
  deleteStudent: Student
  deleteSession(id: ID!): Session!
  deleteSemester(id: ID!): Semester!
  deleteBookList(id: ID!): BookList!
  deleteBook(id: ID!): Book!
  deleteRoutine(id: ID!): Routine!
  deleteDayInWeek(id: ID!): DayInWeek!
  deleteClass(id: ID!): Class!
  deletePeriod(id: ID!): Period!
}

type AdminAuthPayload{
  token: String!
  admin: Admin!
}

type TeacherAuthPayload{
  token: String!
  teacher: Teacher!
}

type StudentAuthPayload{
  token: String!
  student: Student!
}

input LoginInputAdmin{
  username: String!
  password: String!
}

input LoginInputTeacher{
  email: String!
  password: String!
}

input LoginInputStudent{
  email: String!
  password: String!
}

type Admin{
  id: ID!
  name: String!
  email: String!
  username: String!
  departments: [Department!]!
  students: [Student!]!
  sessions: [Session!]!
  teachers: [Teacher!]!
  classes: [Class!]!
  routines: [Routine!]!
  periods: [Period!]!
}

enum ShiftTypes{
  MORNING
  EVENING
}

type Department{
  id: ID!
  name: String!
  students: [Student!]!
  bookLists: [BookList!]!
  routines: [Routine!]!
  classes: [Class!]!
}


type Session{
  id: ID!
  year: String!
  students: [Student!]!
  routines: [Routine!]!
}

type Student{
  id: ID!
  name: String!
  email: String!
  roll: Int!
  reg: Int!
  address: String!
  session: Session!
  phone: String!
  shift: ShiftTypes!
  department: Department!
  semester: Semester!
  password: String!
}

enum SemesterTypes{
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
  SIXTH
  SEVENTH
  EIGHT
}

type Semester{
  id: ID!
  name: SemesterTypes!
  students: [Student!]
  bookLists: [BookList!]!
  routines: [Routine!]!
  classes:[Class!]!
}

type BookList{
  id: ID!
  department: Department!
  probidan: String!
  semester: Semester!
  books:[Book!]!
}

type Book{
  id: ID!
  name: String!
  code: String!
  bookList: BookList!
  classes: [Class!]!
}

type Teacher{
  id: ID!
  name: String!
  email: String!
  address: String!
  position: String!
  phone: String!
  classes: [Class!]!
}

type Routine{
  id: ID!
  title: String!
  shift: String!
  session: Session!
  semester: Semester!
  department: Department!
  days: [DayInWeek!]!
}

type DayInWeek{
  id: ID!
  routine: Routine!
  dayValue: Int!
  day: DayTypes!
  classes: [Class!]!
}


type Class{
  id: ID!
  day: DayInWeek!
  semester: Semester!
  period: Period!
  mentor: Teacher!
  department: Department!
  subject: Book!
}


type Period{
  id: ID!
  time: Int!
  startedAt: String!
  endAt: String!
}

enum DayTypes{
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
